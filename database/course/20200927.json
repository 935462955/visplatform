[{
  "_id": {
    "$oid": "5ee32bbf1f98ea1ed63130e4"
  },
  "course_id": 0,
  "title": "课程模版",
  "text": "",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"这些矩形都应该有海军蓝的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('rect').css('fill') == 'rgb(0, 0, 128)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  \r\n  </script>\r\n</body>\r\n"
},{
  "_id": {
    "$oid": "5eeb09b05ee28411388f1da0"
  },
  "course_id": 1,
  "title": "使用D3添加文档元素",
  "text": "##### 描述:\r\nD3 有多种方法可以用来在文档中增加元素、修改元素。\r\n\r\n``select()``方法用来从文档中选择元素，它以你查询的元素名称作为参数，返回第一个符合条件的 HTML 节点。以下是一个例子：\r\n\r\n``const anchor = d3.select(\"a\");``\r\n\r\n上面这个例子找到页面上的第一个 a 标签（锚标签），将它作为一个 HTML 节点保存在变量``anchor``中。你也可以用其他的方法选择页面上的元素。例子中的 \"d3\" 是对 D3 对象的引用，可以通过它来访问 D3 的方法。\r\n\r\n还可以用``append()``和``text()``方法。\r\n\r\n``append()``方法以你想添加到文档中的元素作为参数，给选中的元素添加一个 HTML 节点，返回那个节点的句柄。\r\n\r\n``text()``方法既可以给节点设置新的文本，也可以获取节点的当前文本。 如果要设置文字内容，需要在圆括号中传入一个 string（字符串）类型的参数。\r\n\r\n下面是一个选择无序列表、添加列表项和文字的例子：\r\n```js    \r\nd3.select(\"ul\")\r\n  .append(\"li\")\r\n  .text(\"Very important item\")\r\n```\r\n\r\n\r\n-----\r\n##### 任务:\r\n使用``select``方法选择文本中的``body``标签。然后用``append``方法为它添加一个``h1``标签，同时在``h1``中添加文本 \"Learning D3\"。\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>body</code>应该有一个<code>h1</code>元素。\",\r\n    \"teststring\": \"$('body').children('h1').length == 1\"\r\n   },\r\n   { \r\n    \"text\": \"<code>h1</code>元素应该包含文本“Learning D3”\",\r\n    \"teststring\": \"$('h1').text() == 'Learning D3'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该访问<code>d3</code>对象\",\r\n    \"teststring\": \"code.match(/d3/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>select</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.select/g)\"\r\n   },\r\n    { \r\n    \"text\": \"您的代码应该使用<code>append</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.append/g)\"\r\n    },\r\n     { \r\n    \"text\": \"您的代码应该使用<code>text</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.text/g)\"\r\n    }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    // Add your code below this line\r\n\r\n\r\n\r\n    // Add your code above this line\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "append()",
    "d3.Selections",
    "select()",
    "text()"
  ]
},{
  "_id": {
    "$oid": "5eeb238752baf26e943af501"
  },
  "course_id": 2,
  "title": "用D3选择一组元素",
  "text": "##### 描述:\r\n```selectAll()```方法选择一组元素。它以 HTML 节点数组的形式返回该文本中所有匹配所输入字符串的对象。以下是一个选择文本中所有锚标签的例子：\r\n\r\n```const anchors = d3.selectAll(\"a\");```\r\n\r\n像```select()```方法一样，```selectAll()```也支持链式调用，你可以在它之后调用其他方法。  \r\n\r\n\r\n-----\r\n##### 任务:\r\n选择所有的```li```标签，通过```.text()```方法将它的文本改为 \"list item\" 。\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的页面上应该有3个<code>li</code>元素，每个元素的文本内容应为'list item'。大小写和空格必须一致。\",\r\n    \"teststring\": \"$('li').text().match(/list item/g).length == 3\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该能访问<code>d3</code>对象\",\r\n    \"teststring\": \"code.match(/d3/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>selectAll</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.selectAll/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <ul>\r\n    <li>Example</li>\r\n    <li>Example</li>\r\n    <li>Example</li>\r\n  </ul>\r\n  <script>\r\n    // 在下面添加你的代码\r\n    \r\n    \r\n    \r\n    // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "selectAll()"
  ]
},{
  "_id": {
    "$oid": "5eeb35a452baf26e943af502"
  },
  "course_id": 3,
  "title": "使用D3中的数据",
  "text": "##### 描述:  \r\nD3 是数据驱动的库,可以使用 D3 的方法将数组形式的数据显示在页面上。\r\n\r\n第一步是让 D3 知道数据。`data`方法选择连接着数据的 DOM 元素,数据集作为参数传递给该方法。\r\n\r\n常见的方法是在文档中为数据集中的每一个数据创建一个元素，为此，你可以使用 D3 的`enter()`方法\r\n\r\n当`enter()`和`data()`方法一起使用时，它把从页面中选择的元素和数据集中的元素作比较。如果页面中选择的元素较少则创建缺少的元素。\r\n\r\n以下是一个选择`ul`元素并根据添加的数组创建新的列表项的例子。\r\n\r\n```\r\n<body>\r\n  <ul></ul>\r\n  <script>\r\n    const dataset = [\"a\", \"b\", \"c\"];\r\n    d3.select(\"ul\").selectAll(\"li\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"li\")\r\n      .text(\"New item\");\r\n  </script>\r\n</body>\r\n```\r\n选择不存在的 li 元素似乎有些难以理解。事实上，这段代码先选择页面上的 ul 元素，再选择所有的列表项——li，它将返回空。然后data()方法接收数组作为参数，并运行三次后面的代码，每次对应数组中的一个对象。enter()方法发现页面中没有 li 元素，但是需要 3 个（每个对应dataset中的一个对象）。它将在 ul 中添加带有文本 \"New item\" 的 li 元素。  \r\n\r\n\r\n-----\r\n##### 任务:  \r\n选择`body`节点，然后选择所有的`h2`元素。让 D3 为`dataset`数组中的每一个对象创建并添加文本为 \"New Title\" 的`h2`标签。你应该使用`data()`和`enter()`方法。  \r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的文档应该有9个<code>h2</code>元素。\",\r\n    \"teststring\": \"$('h2').length == 9\"\r\n   },\r\n   { \r\n    \"text\": \"<code>h2</code>元素中的文本应该是'New Title'。大写和间距应完全匹配\",\r\n    \"teststring\": \"$('h2').text().match(/New Title/g).length == 9\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>data()</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.data/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应使用<code>enter()</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.enter/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    // 在下面添加你的代码\r\n    \r\n    \r\n    \r\n    // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "data()",
    "enter()"
  ]
},{
  "_id": {
    "$oid": "5eeb3c1d52baf26e943af503"
  },
  "course_id": 4,
  "title": "使用D3中的动态数据",
  "text": "最后两个挑战涉及到使用 D3 的`data()`和`enter()`方法来动态展示数据。它们以数据集为参数，和`append()`方法一起使用，为数据集中的每一个元素对象创建一个 DOM 元素。\r\n\r\n在之前的挑战中，你为`dataset`数组中的每一个对象创建了一个新的`h2`元素，但是它们的文本都是相同的 \"New Title\"。 这是因为你还没有使用和每个`h2`元素关联的数据。\r\n\r\n`text()`方法以字符串或者回调函数作为参数：\r\n\r\n`selection.text((d) => d)`\r\n\r\n上面这个例子中的参数`d`指关联数据集的一个对象。\r\n\r\n以当前例子为例，第一个`h2`元素和 12 关联，第二个`h2`元素和 31 关联，第三个`h2`元素和 22 关联，以此类推。\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n改变`text()`方法使得每个`h2`元素显示`dataset`数组中的对应值加上一个空格和 \"USD\"。例如，第一个标题应该为 \"12 USD\"。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>h2</code>应该有“12美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(0).text() == '12 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>h2</code>应该有“31美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(1).text() == '31 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>h2</code>应该有“22美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(2).text() == '22 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>h2</code>应该有“17美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(3).text() == '17 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>h2</code>应该有“25美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(4).text() == '25 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>h2</code>应该有“18美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(5).text() == '18 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>h2</code>应该有“29美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(6).text() == '29 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>h2</code>应该有“14美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(7).text() == '14 USD'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>h2</code>应该有“9美元”的文字。\",\r\n    \"teststring\": \"$('h2').eq(8).text() == '9 USD'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"h2\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"h2\")\r\n      // 在下面添加你的代码\r\n      \r\n      .text(\"New Title\");\r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "回调函数"
  ]
},{
  "_id": {
    "$oid": "5eeb3d6b52baf26e943af504"
  },
  "course_id": 5,
  "title": "给元素添加内联样式",
  "text": "##### 描述:  \r\nD3 可以使用`style()`方法为动态元素添加内联 CSS 样式表。\r\n\r\n`style()`方法以用逗号分隔的键值对作为参数。这里是一个将选中文本的颜色设为蓝色的例子：\r\n\r\n`selection.style(\"color\",\"blue\");`\r\n\r\n\r\n-----\r\n\r\n\r\n##### 任务:  \r\n在编辑器中添加`style()`方法，使所有显示的文本的`font-family`为`verdana`。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"你的<code>h2</code>元素应该有verdana的<code>font-family</code>。\",\r\n    \"teststring\": \"$('h2').css('font-family') == 'verdana'\"\r\n   },\r\n    { \r\n    \"text\": \"您的代码应使用<code>style()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.style/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"h2\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"h2\")\r\n      .text((d) => (d + \" USD\"))\r\n      // 在下面添加你的代码\r\n      \r\n      \r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "style()"
  ]
},{
  "_id": {
    "$oid": "5eeb3f6152baf26e943af505"
  },
  "course_id": 6,
  "title": "根据数据更改样式",
  "text": "##### 描述:  \r\nD3 是关于可视化和展示数据的。如果你期望基于数据来改变元素的样式，你可以在`style()`方法中使用回调函数为不同元素改变样式。\r\n\r\n例如，你想将值小于 20 的数据点设置为蓝色，其余设置为红色。你可以在`style()`方法中使用包含条件逻辑的回调函数。回调函数以`d`作为参数来表示一个数据点：\r\n\r\n```\r\nselection.style(\"color\", (d) => {\r\n  /* 基于情况返回颜色属性的逻辑表达式 */\r\n});\r\n```\r\n`style()`方法不仅仅可以设置`color`——它也适用于其他 CSS 属性。\r\n\r\n\r\n-----\r\n\r\n\r\n##### 任务:  \r\n在编辑器中添加`style()`方法，根据条件设置`h2`元素的`color`属性。写一个回调函数，如果值小于 20 返回 \"red\"，否则返回 \"green\"。\r\n\r\n提示\r\n你可以使用 if-else 语句或者三目操作符。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一<code>h2</code>应该有一个<code>color</code>的红色。\",\r\n    \"teststring\": \"$('h2').eq(0).css('color') == 'rgb(255, 0, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第二<code>h2</code>应该有一个<code>color</code>的绿色。\",\r\n    \"teststring\": \"$('h2').eq(1).css('color') == 'rgb(0, 128, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第三<code>h2</code>应该有一个<code>color</code>的绿色。\",\r\n    \"teststring\": \"$('h2').eq(2).css('color') == 'rgb(0, 128, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第四<code>h2</code>应该有一个<code>color</code>的红色。\",\r\n    \"teststring\": \"$('h2').eq(3).css('color') == 'rgb(255, 0, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第五<code>h2</code>应该有一个<code>color</code>的绿色。\",\r\n    \"teststring\": \"$('h2').eq(4).css('color') == 'rgb(0, 128, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第六<code>h2</code>应该有一个<code>color</code>的红色。\",\r\n    \"teststring\": \"$('h2').eq(5).css('color') == 'rgb(255, 0, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第七<code>h2</code>应该有一个<code>color</code>的绿色。\",\r\n    \"teststring\": \"$('h2').eq(6).css('color') == 'rgb(0, 128, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第八<code>h2</code>应该有一个<code>color</code>的红色。\",\r\n    \"teststring\": \"$('h2').eq(7).css('color') == 'rgb(255, 0, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"第九<code>h2</code>应该有一个<code>color</code>的红色。\",\r\n    \"teststring\": \"$('h2').eq(8).css('color') == 'rgb(255, 0, 0)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"h2\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"h2\")\r\n      .text((d) => (d + \" USD\"))\r\n      // 在下面添加你的代码\r\n      \r\n      \r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb41c352baf26e943af506"
  },
  "course_id": 7,
  "title": "用D3添加Class",
  "text": "##### 描述:  \r\n即使对小型 app 来说在 HTML 元素中大量使用内联样式表也十分难以管理。更方便的是给元素添加遵守 CSS 规则的类。D3 中的`attr()`方法可以给元素添加任何 HTML 属性，包括类名称。\r\n\r\n`attr()`方法和`style()`的使用方法一样。它以逗号分隔的键值对为参数使用回调函数。这里是一个给选中元素添加类名为 \"container\" 的例子：\r\n\r\n`selection.attr(\"class\", \"container\");`\r\n\r\n\r\n-----\r\n\r\n\r\n##### 任务:  \r\n在编辑器中添加`attr()`方法，给`div`元素添加类名`bar`。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的<code>div</code>元素应该有一类<code>bar</code>。\",\r\n    \"teststring\": \"$('div').attr('class') == 'bar'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应使用<code>attr()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.attr/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar {\r\n    width: 25px;\r\n    height: 100px;\r\n    display: inline-block;\r\n    background-color: blue;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"div\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"div\")\r\n      // 在下面添加你的代码\r\n      \r\n      \r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "attr()"
  ]
},{
  "_id": {
    "$oid": "5eeb443d52baf26e943af507"
  },
  "course_id": 8,
  "title": "动态更新元素的高度",
  "text": "##### 描述:  \r\n之前的挑战包括如何从数组中显示数据和如何添加 CSS 类。将这些课程的内容结合起来只需两步你就能创建出一个简单的条形图：\r\n\r\n1) 为每一个数组中的数据点都创建一个`div`\r\n\r\n2) 为每个`div`动态分配高度值，在`style()`方法中使用回调函数将高度值设置为数据大小\r\n\r\n回想使用回调函数设置样式的格式：\r\n\r\n`selection.style(\"cssProperty\", (d) => d)`\r\n\r\n\r\n\r\n-----\r\n\r\n##### 任务:  \r\n在编辑器中添加`style()`方法给每个元素设置`height`属性。使用回调函数返回数据点的值加上字符串 \"px\"。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>div</code>的<code>height</code>应为12像素。\",\r\n    \"teststring\": \"$('div').eq(0)[0].style.height === '12px'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>div</code>的<code>height</code>应为31像素。\",\r\n    \"teststring\": \"$('div').eq(1)[0].style.height === '31px'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>div</code>的<code>height</code>应为22像素。\",\r\n    \"teststring\": \"$('div').eq(2)[0].style.height === '22px'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>div</code>的<code>height</code>应为17像素。\",\r\n    \"teststring\": \"$('div').eq(3)[0].style.height === '17px'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>div</code>的<code>height</code>应为25像素。\",\r\n    \"teststring\": \"$('div').eq(4)[0].style.height === '25px'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>div</code>的<code>height</code>应为18像素。\",\r\n    \"teststring\": \"$('div').eq(5)[0].style.height === '18px'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>div</code>的<code>height</code>应为29像素。\",\r\n    \"teststring\": \"$('div').eq(6)[0].style.height === '29px'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>div</code>的<code>height</code>应为14像素。\",\r\n    \"teststring\": \"$('div').eq(7)[0].style.height === '14px'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>div</code>的<code>height</code>应为9像素。\",\r\n    \"teststring\": \"$('div').eq(8)[0].style.height === '9px'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar {\r\n    width: 25px;\r\n    height: 100px;\r\n    display: inline-block;\r\n    background-color: blue;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"div\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"div\")\r\n      .attr(\"class\", \"bar\")\r\n      // 在下面添加你的代码\r\n      \r\n      \r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb469f52baf26e943af508"
  },
  "course_id": 9,
  "title": "更改条形图的显示方式",
  "text": "##### 描述:  \r\n这里有一些格式的改变可以美化上个挑战中创建的条形图：\r\n\r\n1) 通过在 CSS 中为`bar`的类添加 margin 属性，为每一组之间添加空格以直观的将它们分开\r\n\r\n2) 通过给每个值乘以一个数来缩放高度，增加高度以更好地显示值的差异\r\n\r\n\r\n-----\r\n\r\n\r\n##### 任务:  \r\n首先，在`style`标签中为`bar`类添加 2px 的`margin`属性。然后，在`style()`方法中修改回调函数，使它返回 10 倍原数值的值（在后面加上 \"px\"）。\r\n\r\n提示\r\n通过给每一个数值点乘以相同的常量值仅仅改变比例。这就像放大，它不会改变底层数据的含义。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>div</code>的<code>height</code>应为120像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(0).css('height') == '120px' && $('div').eq(0).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>div</code>的<code>height</code>应为310像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(1).css('height') == '310px' && $('div').eq(1).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>div</code>的<code>height</code>应为220像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(2).css('height') == '220px' && $('div').eq(2).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>div</code>的<code>height</code>应为170像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(3).css('height') == '170px' && $('div').eq(3).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>div</code>的<code>height</code>应为250像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(4).css('height') == '250px' && $('div').eq(4).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>div</code>的<code>height</code>应为180像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(5).css('height') == '180px' && $('div').eq(5).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>div</code>的<code>height</code>应为290像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(6).css('height') == '290px' && $('div').eq(6).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>div</code>的<code>height</code>应为140像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(7).css('height') == '140px' && $('div').eq(7).css('margin-right') == '2px'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>div</code>的<code>height</code>应为90像素， <code>margin</code>为2像素。\",\r\n    \"teststring\": \"$('div').eq(8).css('height') == '90px' && $('div').eq(8).css('margin-right') == '2px'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar {\r\n    width: 25px;\r\n    height: 100px;\r\n    /* 在下面添加你的代码 */\r\n    \r\n    /* 在上面添加你的代码 */\r\n    display: inline-block;\r\n    background-color: blue;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    d3.select(\"body\").selectAll(\"div\")\r\n      .data(dataset)\r\n      .enter()\r\n      .append(\"div\")\r\n      .attr(\"class\", \"bar\")\r\n      // 在下面添加你的代码\r\n      .style(\"height\", (d) => (d + \"px\"))\r\n      \r\n      // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb482d52baf26e943af509"
  },
  "course_id": 10,
  "title": "了解D3中的SVG",
  "text": "##### 描述:  \r\nSVG 是`Scalable Vector Graphics`的缩写。\r\n\r\n\"scalable\" 的意思是如果放大或缩小一个对象，它不会像素化。不管是在小的移动手机屏幕上还是在大的电视显示器上它都会随着显示系统缩放。\r\n\r\nSVG 用于制作常见的几何图形。由于 D3 将数据映射成可视化表达，它用 SVG 来创建可视化的图形。网页上的 SVG 图形必须在 HTML 的`svg`标签中。\r\n\r\n当使用相对单位（例如`vh`、`vw`或者百分比）时，CSS 是可伸缩的。但是在实现数据可视化的时候 SVG 更加的灵活。\r\n\r\n\r\n-----\r\n\r\n##### 任务:  \r\n\r\n用`append()`给`body`加一个`svg`节点。分别使用`attr()`给这个`svg`一个`width`属性和一个`height`属性，并分别将它们设置为给定的常量`w`和给定的常量`h`。你可以在输出中看见它，因为在`style`标签中它的`background-color`设置为 pink。\r\n\r\n提示\r\n`width`和`height`属性没有单位，它们是来定义缩放的。但无论怎么缩放，这个`svg`元素的宽高比永远是 5:1 。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的文档应该有1个<code>svg</code>元素。\",\r\n    \"teststring\": \"$('svg').length == 1\"\r\n   },\r\n   { \r\n    \"text\": \"<code>svg</code>元素的<code>width</code>属性应设置为500。\",\r\n    \"teststring\": \"$('svg').attr('width') == '500'||$('svg').css('width') == '500px'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>svg</code>元素的<code>height</code>属性应设置为100。\",\r\n    \"teststring\": \"$('svg').attr('height') == '100'||$('svg').css('height') == '100px'\"\r\n   }\r\n    ]\r\n",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  svg {\r\n    background-color: pink;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  // 在下面添加你的代码\r\n                 \r\n                  \r\n                  \r\n                  // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb548852baf26e943af50a"
  },
  "course_id": 11,
  "title": "用SVG显示形状",
  "text": "##### 描述:  \r\n上个挑战用给定的宽和高创建了一个`svg`元素，因为在它的`style`标签中有`background-color`，所以它是可见的。这一段代码为给定的宽和高腾出空间。\r\n\r\n下一步是在`svg`区域中创建图形。SVG 支持多种图形，比如矩形和圆形，并用它们来显示数据。例如，在条形图中一个矩形（`<rect>`）SVG 图形可以创建一个组。\r\n\r\n当把图形放入`svg`区域中时，你可以用`x`和`y`坐标来指定它的位置。起始点 (0,0) 是在左上角。`x`正值将图形右移，`y`正值将图形从原点下移\r\n\r\n若要把一个图形放在上个挑战的 500（宽）x 100（高）的`svg`中心，可将`x`坐标设置为 250，`y`坐标设置为 50。\r\n\r\nSVG 的`rect`有四个属性。`x`和`y`坐标指定图形放在`svg区域的位置，height和width指定图形大小。`\r\n\r\n\r\n\r\n-----\r\n\r\n##### 任务:  \r\n用`append()`方法给`svg`添加一个`rect`图形。将它的`width`属性设置为 25，`height`属性设置为 100，`x`和`y`属性都设置为 0。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的文档应该有1个<code>rect</code>元素。\",\r\n    \"teststring\": \"$('rect').length == 1\"\r\n   },\r\n   { \r\n    \"text\": \"<code>rect</code>元素的<code>width</code>属性应设置为25。\",\r\n    \"teststring\": \"$('rect').attr('width') == '25'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>rect</code>元素的<code>height</code>属性应设置为100\",\r\n    \"teststring\": \"$('rect').attr('height') == '100'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>rect</code>元素的<code>x</code>属性应设置为0。\",\r\n    \"teststring\": \"$('rect').attr('x') == '0'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>rect</code>元素的<code>y</code>属性应设置为0。\",\r\n    \"teststring\": \"$('rect').attr('y') == '0'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h)\r\n                  // 在下面添加你的代码\r\n                  \r\n                  \r\n                  \r\n                  // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "<rect>"
  ]
},{
  "_id": {
    "$oid": "5eeb562052baf26e943af50b"
  },
  "course_id": 12,
  "title": "为集合中的每个数据点创建一个Bar",
  "text": "##### 描述:  \r\n上个挑战仅仅在`svg`中添加了一个矩形来表示一组。接下来你将结合到目前为止所学的关于`data()`、`enter()`、SVG 图形的知识，为`dataset`中的每一个数据点创建并且添加一个矩形。\r\n\r\n之前的挑战展示了如何为`dataset`中的每个对象创建并添加一个`div`：\r\n\r\n```\r\nd3.select(\"body\").selectAll(\"div\")\r\n  .data(dataset)\r\n  .enter()\r\n  .append(\"div\")\r\n```\r\n`rect`元素和`div`有一些不同，`rect`必须添加在`svg`元素内，而不能直接添加在`body`内。同时，你需要告诉 D3 将`rect`放在`svg`区域的哪个位置。组的放置会在下一个挑战中讲到。\r\n\r\n\r\n-----\r\n\r\n\r\n##### 描述:  \r\n用`data()`、`enter()`、`append()`方法为`dataset`中的每一个对象创建并添加一个`rect`。每一组都将直接显示在上一组的上面，将上一组覆盖，这将会在下一个挑战中得到修改。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的文档应该有9个<code>rect</code>元素。\",\r\n    \"teststring\": \"$('rect').length == 9\"\r\n   },\r\n   {\r\n    \"text\": \"您的代码应该使用<code>data()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.data/g)\"\r\n   },\r\n   {\r\n    \"text\": \"您的代码应使用<code>enter()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.enter/g)\"\r\n   },\r\n   {\r\n    \"text\": \"您的代码应使用<code>append()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.append/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n       .attr(\"x\", 0)\r\n       .attr(\"y\", 0)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", 100);\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb579652baf26e943af50c"
  },
  "course_id": 13,
  "title": "动态设置每个Bar的坐标",
  "text": "##### 描述:  \r\n上个挑战在`svg`元素中为`dataset`的每一个数据点创建并且添加了一个矩形。其中一个矩形表示一组，但是它们相互重叠。\r\n\r\n矩形的摆放是由`x`和`y`属性处理的，它们告诉 D3 在`svg`区域的哪个位置开始绘制图形。上个挑战将它们都设置为 0，所以所有组都摆放在左上角。\r\n\r\n对于条形图，所有组应该处于相同的垂直水平上，也就是说所有组的`y`值相同（为 0），但是`x`值需要随着增添新的组而变化。注意`x`值越大图形就越靠近右边，所以当遍历`dataset`中的元素时，`x`的值应该递增。\r\n\r\nD3 的`attr()`方法可接收一个回调函数来动态设置属性。这个回调函数有两个参数，一个是数据点本身（通常是`d`），另一个是该数据点在数组中的下标，这个参数是可选的。下面是其格式：\r\n\r\n```\r\nselection.attr(\"property\", (d, i) => {\r\n  /*\r\n  * d 是数据点的值\r\n  * i 是数据点在数组中的下标\r\n  */\r\n})\r\n```\r\n值得注意的是，你不需要写`for`循环或者用`forEach`迭代数据集中的对象。`data()`方法会解析数据集，任何链接在它后面的方法都会为数据集中的每个对象运行一次。\r\n\r\n\r\n-----\r\n\r\n\r\n##### 任务:  \r\n改变`x`属性的回调函数，让它返回下标乘以 30 的值。\r\n\r\n提示\r\n每组的宽为 25，所以每次`x`增加 30 可在每组之间留出一些空隙。在这个例子中任何比 25 大的数也同样适用。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>rect</code>的<code>x</code>值应为0。\",\r\n    \"teststring\": \"$('rect').eq(0).attr('x') == '0'\"\r\n   },\r\n    { \r\n    \"text\": \"第二个<code>rect</code>的<code>x</code>值应为30。\",\r\n    \"teststring\": \"$('rect').eq(1).attr('x') == '30'\"\r\n   },\r\n    { \r\n    \"text\": \"第三个<code>rect</code>的<code>x</code>值应为60。\",\r\n    \"teststring\": \"$('rect').eq(2).attr('x') == '60'\"\r\n   },\r\n    { \r\n    \"text\": \"第四个<code>rect</code>的<code>x</code>值应为90。\",\r\n    \"teststring\": \"$('rect').eq(3).attr('x') == '90'\"\r\n   },\r\n    { \r\n    \"text\": \"第五个<code>rect</code>的<code>x</code>值应为120。\",\r\n    \"teststring\": \"$('rect').eq(4).attr('x') == '120'\"\r\n   },\r\n    { \r\n    \"text\": \"第六个<code>rect</code>的<code>x</code>值应为150。\",\r\n    \"teststring\": \"$('rect').eq(5).attr('x') == '150'\"\r\n   },\r\n    { \r\n    \"text\": \"第七个<code>rect</code>的<code>x</code>值应为180。\",\r\n    \"teststring\": \"$('rect').eq(6).attr('x') == '180'\"\r\n   },\r\n    { \r\n    \"text\": \"第八个<code>rect</code>的<code>x</code>值应为210。\",\r\n    \"teststring\": \"$('rect').eq(7).attr('x') == '210'\"\r\n   },\r\n    { \r\n    \"text\": \"第九个<code>rect</code>的<code>x</code>值应为240。\",\r\n    \"teststring\": \"$('rect').eq(8).attr('x') == '240'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n                \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => {\r\n         // 在下面添加你的代码\r\n         \r\n         \r\n         \r\n         // 在上面添加你的代码\r\n       })\r\n       .attr(\"y\", 0)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", 100);\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb58ac52baf26e943af50d"
  },
  "course_id": 14,
  "title": "动态更改每个条的高度",
  "text": "##### 描述:  \r\n和动态设置`x`值一样，每组的高也可以被设置成数组中数据点的值。\r\n\r\n```\r\nselection.attr(\"property\", (d, i) => {\r\n  /*\r\n  * d 是数据点的值\r\n  * i 是数据点在数组中的下标\r\n  */\r\n})\r\n```\r\n\r\n\r\n-----\r\n\r\n##### 任务:  \r\n改变`height`属性的回调函数，让它返回数据值乘以 3 的值。\r\n\r\n提示\r\n记住，把所有数据点乘以相同的常数来对数据进行缩放（就像放大）。这有利于看清例子中每组之间的差异。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>rect</code>的<code>height</code>应为36。\",\r\n    \"teststring\": \"$('rect').eq(0).attr('height') == '36'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>rect</code>的<code>height</code>应为93。\",\r\n    \"teststring\": \"$('rect').eq(1).attr('height') == '93'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>rect</code>的<code>height</code>应为66。\",\r\n    \"teststring\": \"$('rect').eq(2).attr('height') == '66'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>rect</code>的<code>height</code>应为51。\",\r\n    \"teststring\": \"$('rect').eq(3).attr('height') == '51'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>rect</code>的<code>height</code>应为75。\",\r\n    \"teststring\": \"$('rect').eq(4).attr('height') == '75'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>rect</code>的<code>height</code>应为54。\",\r\n    \"teststring\": \"$('rect').eq(5).attr('height') == '54'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>rect</code>的<code>height</code>应为87。\",\r\n    \"teststring\": \"$('rect').eq(6).attr('height') == '87'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>rect</code>应该有42的<code>height</code>。\",\r\n    \"teststring\": \"$('rect').eq(7).attr('height') == '42'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>rect</code>的<code>height</code>应为27。\",\r\n    \"teststring\": \"$('rect').eq(8).attr('height') == '27'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", 0)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => {\r\n         // 在下面添加你的代码\r\n         \r\n         \r\n         \r\n         // 在上面添加你的代码\r\n       });\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb59f552baf26e943af50e"
  },
  "course_id": 15,
  "title": "反转SVG元素",
  "text": "##### 描述:  \r\n你可能已经注意到了常见的条形图像是把这个翻转或者颠倒过来。这是因为 SVG 的 (x, y) 坐标有些特别。\r\n\r\n在 SVG 中，坐标轴的原点在左上角。`x`坐标为 0 将图形放在 SVG 区域的左边缘，`y`坐标为 0 将图形放在 SVG 区域的上边缘。`x`值增大矩形将向右移动，`y`值增大矩形将向下移动。\r\n\r\n为了使条形图向上，需要改变`y`坐标计算的方式。这需要计算组的高度和 SVG 区域的总高度。\r\n\r\nSVG 区域的高度为 100。如果在集合中一个数据点的值为 0，这组将从 SVG 区域的最底端开始（而不是顶端）。为此，`y`坐标的值应为 100。如果数据点的值为 1，你将从`y`坐标为 100 开始来将这组设置在底端，然后需要考虑该组的高度为 1，所以最终的`y`坐标将是 99。\r\n\r\n`y`坐标为`y = heightOfSVG - heightOfBar`会将条形图向上放置。\r\n\r\n\r\n\r\n-----\r\n\r\n##### 任务:\r\n改变`y`属性的回调函数，让条形图向上放置。`height`的值是 3 倍`d`的值。\r\n\r\n提示\r\n通常，高度关系为`y = h - m * d`，其中`m`是对数据点进行缩放的比例。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>rect</code>的<code>y</code>值应为64。\",\r\n    \"teststring\": \"$('rect').eq(0).attr('y') == h - (dataset[0] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>rect</code>的<code>y</code>值应为7。\",\r\n    \"teststring\": \"$('rect').eq(1).attr('y') == h - (dataset[1] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>rect</code>的<code>y</code>值应为34。\",\r\n    \"teststring\": \"$('rect').eq(2).attr('y') == h - (dataset[2] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>rect</code>的<code>y</code>值应为49。\",\r\n    \"teststring\": \"$('rect').eq(3).attr('y') == h - (dataset[3] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>rect</code>的<code>y</code>值应为25。\",\r\n    \"teststring\": \"$('rect').eq(4).attr('y') == h - (dataset[4] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>rect</code>的<code>y</code>值应为46。\",\r\n    \"teststring\": \"$('rect').eq(5).attr('y') == h - (dataset[5] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>rect</code>的<code>y</code>值应为13。\",\r\n    \"teststring\": \"$('rect').eq(6).attr('y') == h - (dataset[6] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>rect</code>的<code>y</code>值应为58。\",\r\n    \"teststring\": \"$('rect').eq(7).attr('y') == h - (dataset[7] * 3)\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>rect</code>的<code>y</code>值应为73。\",\r\n    \"teststring\": \"$('rect').eq(8).attr('y') == h - (dataset[8] * 3)\"\r\n   }\r\n    ]\r\n",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => {\r\n         // 在下面添加你的代码\r\n         \r\n         \r\n         \r\n         // 在上面添加你的代码\r\n       })\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => 3 * d);\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb6aeb52baf26e943af50f"
  },
  "course_id": 19,
  "title": "给 D3 元素添加悬停效果",
  "text": "##### 描述:  \r\n当用户用鼠标悬停在组上时，可以添加高亮显示栏的效果。到目前为止，矩形的样式应用了内置的D3和SVG方法，但是你也可以使用 CSS。\r\n\r\n你可是使用`attr()`方法在 SVG 元素上设置 CSS 类。然后用`:hover`伪类为你新添加的 CSS 类设置鼠标悬停的效果。\r\n\r\n-----\r\n##### 任务:  \r\n用`attr()`方法给所有的`rect`元素都添加`bar`类。当鼠标悬浮在一组上时，这将使它的`fill`颜色变为 brown。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"你的<code>rect</code>元素应该有一类<code>bar</code> 。\",\r\n    \"teststring\": \"$('rect').attr('class') == 'bar'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar:hover {\r\n    fill: brown;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n\r\n    const w = 500;\r\n    const h = 100;\r\n\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n\r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => 3 * d)\r\n       .attr(\"fill\", \"navy\")\r\n       // 在下面添加你的代码\r\n\r\n\r\n\r\n       // 在上面添加你的代码\r\n\r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) => d)\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - (3 * d) - 3);\r\n\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb703e52baf26e943af510"
  },
  "course_id": 20,
  "title": "给 D3 元素添加工具提示",
  "text": "##### 描述：\r\n当用户在一个对象上悬停时，提示框可以显示关于这个对象更多的信息。在可视化中有多种方法添加提示框，这个挑战将使用 SVG 的`title`元素。\r\n\r\n`title`和`text()`方法一起给每组动态添加数据。\r\n\r\n-----\r\n##### 任务:\r\n在每个`rect`节点下面添加一个`title`元素，然后用回调函数调用`text()`方法使它的文本显示数据值。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该有9个<code>title</code>元素。\",\r\n    \"teststring\": \"$('title').length == 9\"\r\n   },\r\n   { \r\n    \"text\": \"第一个<code>title</code>元素的工具提示文本应为12。\",\r\n    \"teststring\": \"$('title').eq(0).text() == '12'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>title</code>元素的工具提示文本应为31\",\r\n    \"teststring\": \"$('title').eq(1).text() == '31'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>title</code>元素的工具提示文本应为22。\",\r\n    \"teststring\": \"$('title').eq(2).text() == '22'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>title</code>元素的工具提示文本应为17。\",\r\n    \"teststring\": \"$('title').eq(3).text() == '17'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>title</code>元素的工具提示文本应为25。\",\r\n    \"teststring\": \"$('title').eq(4).text() == '25'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>title</code>元素的工具提示文本应为18。\",\r\n    \"teststring\": \"$('title').eq(5).text() == '18'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>title</code>元素的工具提示文本应为29。\",\r\n    \"teststring\": \"$('title').eq(6).text() == '29'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>title</code>元素的工具提示文本应为14。\",\r\n    \"teststring\": \"$('title').eq(7).text() == '14'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>title</code>元素的工具提示文本应为9。\",\r\n    \"teststring\": \"$('title').eq(8).text() == '9'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar:hover {\r\n    fill: brown;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n\r\n    const w = 500;\r\n    const h = 100;\r\n\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n\r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => d * 3)\r\n       .attr(\"fill\", \"navy\")\r\n       .attr(\"class\", \"bar\")\r\n       // 在下面添加你的代码\r\n \r\n\r\n\r\n       // 在上面添加你的代码\r\n\r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) => d)\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - (d * 3 + 3))\r\n\r\n  </script>\r\n</body>",
  "concept": [
    "<title>"
  ]
},{
  "_id": {
    "$oid": "5eeb712952baf26e943af511"
  },
  "course_id": 23,
  "title": "给 Circle 元素添加属性",
  "text": "##### 描述:  \r\n上个挑战为`dataset`中的每个点都创建了`circle`元素，并将它们添加到 SVG 画布上。但是 D3 需要更多关于位置和`circle`大小的信息来正确的显示它们。\r\n\r\n在 SVG 中`circle`有三个主要的属性。`cx`和`cy`属性是坐标，它们告诉 D3 将图形的中心放在 SVG 画布的何处。半径（`r`属性）给出`circle`的大小。\r\n\r\n就像`rect`的`y`坐标，`circle`的`cy`属性是从 SVG 画布的顶端开始测量的，而不是从底端。\r\n\r\n所有的属性都可以用回调函数来动态设值。记住，所有串联在`data(dataset)`后面的方法为`dataset`中的每个对象都运行一次。回调函数中的`d`参数指在`dataset`中的当前对象，对每个点来说都是一个数组。就像 `d[0]`，你可以使用方括号的方式来访问数组中的值。\r\n\r\n-----\r\n##### 任务:\r\n为`circle`元素添加`cx`、`cy`、`r`属性。`cx`的值应该是`dataset`中每个对象的数组的第一个数，`cy`的值应该根据数据中的第二个数，但是要确保正向显示图表而不是倒转。所有圆圈的`r`的值应该为 5。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该有10个<code>circle</code>元素。\",\r\n    \"teststring\": \"$('circle').length == 10\"\r\n   },\r\n   { \r\n    \"text\": \"第一个<code>circle</code>元素的<code>cx</code>值应为34， <code>cy</code>值为422， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(0).attr('cx') == '34' && $('circle').eq(0).attr('cy') == '422' && $('circle').eq(0).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>circle</code>元素的<code>cx</code>值应为109， <code>cy</code>值为220， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(1).attr('cx') == '109' && $('circle').eq(1).attr('cy') == '220' && $('circle').eq(1).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>circle</code>元素的<code>cx</code>值应为310， <code>cy</code>值为380， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(2).attr('cx') == '310' && $('circle').eq(2).attr('cy') == '380' && $('circle').eq(2).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>circle</code>元素的<code>cx</code>值应为79， <code>cy</code>值为89， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(3).attr('cx') == '79' && $('circle').eq(3).attr('cy') == '89' && $('circle').eq(3).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>circle</code>元素的<code>cx</code>值应为420， <code>cy</code>值为280， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(4).attr('cx') == '420' && $('circle').eq(4).attr('cy') == '280' && $('circle').eq(4).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>circle</code>元素的<code>cx</code>值应为233， <code>cy</code>值为355， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(5).attr('cx') == '233' && $('circle').eq(5).attr('cy') == '355' && $('circle').eq(5).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>circle</code>元素的<code>cx</code>值应为333， <code>cy</code>值为404， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(6).attr('cx') == '333' && $('circle').eq(6).attr('cy') == '404' && $('circle').eq(6).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>circle</code>元素的<code>cx</code>值应为222， <code>cy</code>值为167， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(7).attr('cx') == '222' && $('circle').eq(7).attr('cy') == '167' && $('circle').eq(7).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>circle</code>元素的<code>cx</code>值应为78， <code>cy</code>值为180， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(8).attr('cx') == '78' && $('circle').eq(8).attr('cy') == '180' && $('circle').eq(8).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"第十个<code>circle</code>元素的<code>cx</code>值应为21， <code>cy</code>值为377， <code>r</code>值为5。\",\r\n    \"teststring\": \"$('circle').eq(9).attr('cx') == '21' && $('circle').eq(9).attr('cy') == '377' && $('circle').eq(9).attr('r') == '5'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,    78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,    411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,   333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,    123 ]\r\n                ];\r\n\r\n\r\n    const w = 500;\r\n    const h = 500;\r\n\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n\r\n    svg.selectAll(\"circle\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"circle\")\r\n       // 在下面添加你的代码\r\n\r\n\r\n\r\n       // 在上面添加你的代码\r\n\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeb9b7352baf26e943af512"
  },
  "course_id": 30,
  "title": "添加坐标轴到可视化中",
  "text": "##### 描述:  \r\n另一种改进散点图的方法是添加 x 轴和 y 轴。\r\n\r\nD3 有两种方法来渲染 y 轴和 x 轴，分别是`axisLeft`和`axisBottom`。下面是一个基于上个挑战中的`xScale`创建 x 轴的例子：\r\n\r\n`const xAxis = d3.axisBottom(xScale);`\r\n\r\n下一步是在 SVG 画布上渲染 x 轴。为此，你可以使用一个常见的 SVG 组件，`g`元素，`g`是英文中组(group)的缩写。\r\n\r\n不同于`rect`、`circle`、`text`，在渲染时，轴只是一条直线。因为它是一个简单的图形，所以可以用`g`。\r\n\r\n最后一步是使用`transforms`属性将轴放置在 SVG 画布的正确位置上。否则，轴将会沿着 SVG 画布的边缘渲染，从而不可见。\r\n\r\nSVG 支持多种`transforms`，但是放置轴需要`translate`。当它应用在`g`元素上时，它根据给出的总量移动整组。下面是一个例子：\r\n\r\n```\r\nconst xAxis = d3.axisBottom(xScale);\r\n\r\nsvg.append(\"g\")\r\n   .attr(\"transform\", \"translate(0, \" + (h - padding) + \")\")\r\n   .call(xAxis);\r\n```\r\n上部分代码将 x 轴放置在 SVG 画布的底端。然后 x 轴作为参数被传递给`call`方法。\r\n\r\n除了`translate`的参数是 (x,0) 格式的，y 轴也是一样的。因为`translate`是上面`attr`方法中的一个字符串，你可以在参数中使用字符串的连接将变量值包括进去。\r\n\r\n-----\r\n##### 任务:  \r\n现在散点图有 x 轴了。用`axisLeft`方法在变量`yAxis`中创建 y 轴，然后用`g`元素渲染 y 轴。确保用`transform`属性将 y 轴向右平移 padding 个单位，向下平移 0 个单位。记得`call()`y 轴。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应使用<code>axisLeft()</code>方法， <code>yScale</code>作为参数传递。\",\r\n    \"teststring\": \"code.match(/\\\\.axisLeft\\\\(yScale\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"y轴<code>g</code>元素应具有<code>transform</code>属性以将轴平移（60,0）。\",\r\n    \"teststring\": \"$('g').eq(10).attr('transform').match(/translate\\\\(60\\\\s*?,\\\\s*?0\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该调用<code>yAxis</code> 。\",\r\n    \"teststring\": \"code.match(/\\\\.call\\\\(\\\\s*yAxis\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,     78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,   411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,    333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,   123 ]\r\n                ];\r\n    \r\n    const w = 500;\r\n    const h = 500;\r\n    const padding = 60;\r\n    \r\n    const xScale = d3.scaleLinear()\r\n                     .domain([0, d3.max(dataset, (d) => d[0])])\r\n                     .range([padding, w - padding]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n                     .domain([0, d3.max(dataset, (d) => d[1])])\r\n                     .range([h - padding, padding]);\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"circle\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"circle\")\r\n       .attr(\"cx\", (d) => xScale(d[0]))\r\n       .attr(\"cy\",(d) => yScale(d[1]))\r\n       .attr(\"r\", (d) => 5);\r\n    \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) =>  (d[0] + \",\" + d[1]))\r\n       .attr(\"x\", (d) => xScale(d[0] + 10))\r\n       .attr(\"y\", (d) => yScale(d[1]))\r\n    \r\n    const xAxis = d3.axisBottom(xScale);\r\n    \r\n    svg.append(\"g\")\r\n       .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\r\n       .call(xAxis);\r\n    \r\n    // 在下面添加你的代码\r\n    \r\n    \r\n    \r\n    // 在上面添加你的代码\r\n  \r\n  </script>\r\n</body>"
},{
  "_id": {
    "$oid": "5eeb9e7852baf26e943af513"
  },
  "course_id": 17,
  "title": "给 D3 元素添加标签",
  "text": "##### 描述:  \r\nD3 允许使用 SVG 的`text`元素给图形元素贴标签，例如给条形图中的各组都贴上标签。\r\n\r\n和`rect`元素类似，`text`元素也需要`x`和`y`属性来指定其放置在 SVG 画布上的位置，它也需要能够获取数据来显示数据值。\r\n\r\n关于如何给组贴标签，D3 给了你很高的控制权。\r\n\r\n\r\n\r\n-----\r\n##### 任务:\r\n编辑器中的代码已经将数据绑定到每个新的`text`元素。首先，在`svg`中添加`text`节点。然后，添加`x`和`y`坐标属性，除了`text`的`y`值应该使标签比组的高`y`3 个单位，其余值的计算方法应该和`rect`中计算方法一样。最后，用 D3 的`text()`方法将标签的文本设置为和数据点相等的值。\r\n\r\n提示<br>\r\n关于标签比组高，想一想`text`的`y`值应该比组的`y`值大 3 还是小 3。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"第一个<code>text</code>元素的标签应为12， <code>y</code>值应为61。\",\r\n    \"teststring\": \"$('text').eq(0).text() == '12' && $('text').eq(0).attr('y') == '61'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个<code>text</code>元素的标签应为31， <code>y</code>值应为4。\",\r\n    \"teststring\": \"$('text').eq(1).text() == '31' && $('text').eq(1).attr('y') == '4'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个<code>text</code>元素的标签应为22， <code>y</code>值应为31。\",\r\n    \"teststring\": \"$('text').eq(2).text() == '22' && $('text').eq(2).attr('y') == '31'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个<code>text</code>元素的标签应为17， <code>y</code>值应为46。\",\r\n    \"teststring\": \"$('text').eq(3).text() == '17' && $('text').eq(3).attr('y') == '46'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个<code>text</code>元素的标签应为25， <code>y</code>值应为22。\",\r\n    \"teststring\": \"$('text').eq(4).text() == '25' && $('text').eq(4).attr('y') == '22'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个<code>text</code>元素的标签应为18， <code>y</code>值应为43。\",\r\n    \"teststring\": \"$('text').eq(5).text() == '18' && $('text').eq(5).attr('y') == '43'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个<code>text</code>元素的标签应为29， <code>y</code>值应为10。\",\r\n    \"teststring\": \"$('text').eq(6).text() == '29' && $('text').eq(6).attr('y') == '10'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个<code>text</code>元素的标签应为14， <code>y</code>值应为55。\",\r\n    \"teststring\": \"$('text').eq(7).text() == '14' && $('text').eq(7).attr('y') == '55'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个<code>text</code>元素的标签应为9， <code>y</code>值应为70。\",\r\n    \"teststring\": \"$('text').eq(8).text() == '9' && $('text').eq(8).attr('y') == '70'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => 3 * d)\r\n       .attr(\"fill\", \"navy\");\r\n    \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    "<text>"
  ]
},{
  "_id": {
    "$oid": "5eeba1b752baf26e943af514"
  },
  "course_id": 24,
  "title": "向散点图的 Circles 添加标签",
  "text": "##### 描述:  \r\n你可以添加文本为散点图中的点创建标签。\r\n\r\n目标是显示以逗号分隔的值，分别为`dataset`中每个对象的第一个(`x`)和第二个(`y`)字段\r\n\r\n`text`节点需要`x`和`y`属性来指定放置在 SVG 画布中的位置。在这个挑战中，`y`值（决定高度）可以用和`circle`的`cy`属性相同的值，`x`值可以比`circle`的`cx`值稍微大一些，这样标签才是可见的并且被放置在散点的右边。\r\n\r\n-----\r\n##### 任务:  \r\n用`text`元素为散点图中的每个点创建标签。标签的文本应该为用一个逗号和一个空格分隔开的两个值，例如，第一个点的标签为 \"34, 78\"。设置x`属`性比`circle`的`cx`属性大 5 个单位，设置`y`属性和`circle`的`cy`属性相同。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该有10个<code>text</code>元素。\",\r\n    \"teststring\": \"$('text').length == 10\"\r\n   },\r\n   { \r\n    \"text\": \"第一个标签的文本应为“34,78”， <code>x</code>值为39， <code>y</code>值为422。\",\r\n    \"teststring\": \"$('text').eq(0).text() == '34, 78' && $('text').eq(0).attr('x') == '39' && $('text').eq(0).attr('y') == '422'\"\r\n   },\r\n   { \r\n    \"text\": \"第二个标签的文本应为“109,280”， <code>x</code>值为114， <code>y</code>值为220。\",\r\n    \"teststring\": \"$('text').eq(1).text() == '109, 280' && $('text').eq(1).attr('x') == '114' && $('text').eq(1).attr('y') == '220'\"\r\n   },\r\n   { \r\n    \"text\": \"第三个标签的文本应为“310,120”， <code>x</code>值为315， <code>y</code>值为380。\",\r\n    \"teststring\": \"$('text').eq(2).text() == '310, 120' && $('text').eq(2).attr('x') == '315' && $('text').eq(2).attr('y') == '380'\"\r\n   },\r\n   { \r\n    \"text\": \"第四个标签的文本应为“79,411”， <code>x</code>值为84， <code>y</code>值为89。\",\r\n    \"teststring\": \"$('text').eq(3).text() == '79, 411' && $('text').eq(3).attr('x') == '84' && $('text').eq(3).attr('y') == '89'\"\r\n   },\r\n   { \r\n    \"text\": \"第五个标签的文本应为“420,220”， <code>x</code>值为425， <code>y</code>值为280。\",\r\n    \"teststring\": \"$('text').eq(4).text() == '420, 220' && $('text').eq(4).attr('x') == '425' && $('text').eq(4).attr('y') == '280'\"\r\n   },\r\n   { \r\n    \"text\": \"第六个标签的文本应为“233,145”， <code>x</code>值为238， <code>y</code>值为355。\",\r\n    \"teststring\": \"$('text').eq(5).text() == '233, 145' && $('text').eq(5).attr('x') == '238' && $('text').eq(5).attr('y') == '355'\"\r\n   },\r\n   { \r\n    \"text\": \"第七个标签的文本应为“333,96”， <code>x</code>值为338， <code>y</code>值为404。\",\r\n    \"teststring\": \"$('text').eq(6).text() == '333, 96' && $('text').eq(6).attr('x') == '338' && $('text').eq(6).attr('y') == '404'\"\r\n   },\r\n   { \r\n    \"text\": \"第八个标签的文本应为“222,333”， <code>x</code>值为227， <code>y</code>值为167。\",\r\n    \"teststring\": \"$('text').eq(7).text() == '222, 333' && $('text').eq(7).attr('x') == '227' && $('text').eq(7).attr('y') == '167'\"\r\n   },\r\n   { \r\n    \"text\": \"第九个标签的文本应为“78,320”， <code>x</code>值为83， <code>y</code>值为180。\",\r\n    \"teststring\": \"$('text').eq(8).text() == '78, 320' && $('text').eq(8).attr('x') == '83' && $('text').eq(8).attr('y') == '180'\"\r\n   },\r\n   { \r\n    \"text\": \"第十个标签的文本应为“21,123”， <code>x</code>值为26， <code>y</code>值为377。\",\r\n    \"teststring\": \"$('text').eq(9).text() == '21, 123' && $('text').eq(9).attr('x') == '26' && $('text').eq(9).attr('y') == '377'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,    78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,    411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,   333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,    123 ]\r\n                ];\r\n    \r\n    \r\n    const w = 500;\r\n    const h = 500;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"circle\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"circle\")\r\n       .attr(\"cx\", (d, i) => d[0])\r\n       .attr(\"cy\", (d, i) => h - d[1])\r\n       .attr(\"r\", 5);\r\n    \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeba25152baf26e943af515"
  },
  "course_id": 16,
  "title": "更改 SVG 元素的颜色",
  "text": "##### 描述:  \r\n所有组都在正确的位置上了，但是它们都是一样的黑色。SVG 可以改变组的颜色。\r\n\r\n在 SVG 中，`rect`图形用`fill`属性着色，它支持十六进制代码、颜色名称、rgb 值以及更复杂的选项，比如渐变和透明。\r\n\r\n-----\r\n##### 任务:\r\n添加`attr()`方法，将所有组的 \"fill\" 设置为 \"navy\"。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"这些矩形都应该有海军蓝的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('rect').css('fill') == 'rgb(0, 0, 128)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => 3 * d)\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeba40152baf26e943af516"
  },
  "course_id": 25,
  "title": "用 D3 创建线性比例",
  "text": "##### 描述:  \r\n条形图和散点图都直接在 SVG 画布上绘制数据。但是，如果一组的高或者其中一个数据点比 SVG 的高或宽更大，它将跑到 SVG 区域外。\r\n\r\nD3 中，比例尺可帮助布局数据。`Scales`是告诉程序如何将一组原始数据点映射到 SVG 画布上像素的函数。\r\n\r\n例如，假设你有一个 100x500 大小的 SVG 画布，你想为许多国家绘制国内生产总值(GDP)的图表。这组数据将在十亿美元或万亿美元的范围内。你给 D3 提供一种缩放方法告诉它如何将大的 GDP 值放置在 100x500 大小的区域。\r\n\r\n你不太可能按原样绘制原始数据，在绘制之前，将整个数据集缩放，这样`x`和`y`值才适合你画布的宽高。\r\n\r\nD3 有几种缩放类型。对于线性缩放（通常使用于定量数据），使用 D3 的`scaleLinear()`方法：\r\n\r\n`const scale = d3.scaleLinear()`\r\n\r\n默认情况下，比例尺使用一比一的比例，输出的值和输入的值相同。在后面的章节中将涉及如何改变默认比例。\r\n\r\n-----\r\n##### 任务:  \r\n改变`scale`变量的值创建线性缩放，然后将`output`变量设置为`scale`函数（参数为 50）。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>h2</code>的文本应为50。\",\r\n    \"teststring\": \"$('h2').text() == '50'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应使用<code>scaleLinear()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.scaleLinear/g)\"\r\n   },\r\n   { \r\n    \"text\": \"output变量应该调用输入参数为 50 的 scale 的值。\",\r\n    \"teststring\": \"code.match(/scale\\\\(\\\\s*?50\\\\s*?\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    // 在下面添加你的代码\r\n    \r\n    const scale = undefined; // 在这里创建 scale \r\n    const output = scale(); // 在这里用一个参数调用 scale \r\n    \r\n    // 在上面添加你的代码\r\n    \r\n    d3.select(\"body\")\r\n      .append(\"h2\")\r\n      .text(output);\r\n  \r\n  </script>\r\n</body>",
  "concept": [
    "Scales()",
    "scaleLinear()"
  ]
},{
  "_id": {
    "$oid": "5eeba4a652baf26e943af517"
  },
  "course_id": 22,
  "title": "使用 SVG Circles 创建散点图",
  "text": "##### 描述:  \r\n散点图是另一种形式的可视化。它用圆圈来映射数据点，每个数据点有两个值，这两个值和`x`和`y`轴相关联，在可视化中用来给圆圈定位。\r\n\r\nSVG 用`circle`标签来创建圆形，它和之前用来构建条形图的`rect`非常相像。\r\n\r\n-----\r\n##### 任务:   \r\n使用`data()`、`enter()`、`append()`方法将`dataset`和新添加到 SVG 画布上的`circle`元素绑定起来。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该有10个<code>circle</code>元素。\",\r\n    \"teststring\": \"$('circle').length == 10\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,    78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,    411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,   333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,    123 ]\r\n                ];\r\n    \r\n    \r\n    const w = 500;\r\n    const h = 500;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"circle\")\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  \r\n  </script>\r\n</body>",
  "concept": [
    "<circle>"
  ]
},{
  "_id": {
    "$oid": "5eeba63a52baf26e943af518"
  },
  "course_id": 26,
  "title": "按比例设置域和范围",
  "text": "##### 描述:  \r\n默认情况下，比例尺使用同一关系(identity relationship)，即输入值直接映射为输出值。但是比例尺可以更灵活更有趣。\r\n\r\n假设有一个数据集范围为 50 到 480，这是缩放的输入信息，也被称为域(domain)。\r\n\r\n你想沿着 10 个单位到 500 个单位的`x`轴映射这些点到 SVG 画布上。这是输出信息，也被称为范围(range)。\r\n\r\n`domain()`和`range()`方法设置缩放的值，它们都以至少有两个元素的数组为参数。下面是一个例子：\r\n\r\n```\r\nscale = d3.scaleLinear()\r\n// 设置域\r\n// 域覆盖了一组输入值\r\nscale.domain([50, 480]);\r\n// 设置范围\r\n// 范围覆盖了一组输出值\r\nscale.range([10, 500]);\r\nscale(50) // 返回 10\r\nscale(480) // 返回 500\r\nscale(325) // 返回 323.37\r\nscale(750) // 返回 807.67\r\n```\r\n注意，比例尺使用了域和范围之间的线性关系来找出给定数字的输出值。域中的最小值(50)映射为范围中的最小值(10)。\r\n\r\n-----\r\n##### 任务:\r\n创建一个比例尺，将它的域设置为`[250, 500]`，范围设置为`[10, 150]`。\r\n\r\n提示<br>\r\n你可以将`domain()`和`range()`方法串联在`scale`变量后。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应使用<code>domain()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.domain/g)\"\r\n   },\r\n   { \r\n    \"text\": \"比例的<code>domain()</code>应设置为<code>[250, 500]</code> 。'\",\r\n    \"teststring\": \"JSON.stringify(scale.domain()) == JSON.stringify([250, 500])\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应使用<code>range()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.range/g)\"\r\n   },\r\n   { \r\n    \"text\": \"刻度的<code>range()</code>应设置为<code>[10, 150]</code> 。\",\r\n    \"teststring\": \"JSON.stringify(scale.range()) == JSON.stringify([10, 150])\"\r\n   },\r\n   { \r\n    \"text\": \"<code>h2</code>的文本应为-102。\",\r\n    \"teststring\": \"$('h2').text() == '-102'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>\r\n  \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    // 在下面添加你的代码\r\n    const scale = d3.scaleLinear();\r\n    \r\n    \r\n    \r\n    // 在上面添加你的代码\r\n    const output = scale(50);\r\n    d3.select(\"body\")\r\n      .append(\"h2\")\r\n      .text(output);\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eeba75252baf26e943af519"
  },
  "course_id": 18,
  "title": "给 D3 标签添加样式",
  "text": "##### 描述:  \r\nD3 可以将样式添加到组标签中。`fill`属性为`text`节点设置文本颜色，`style()`方法设置其它样式的 CSS 规则，例如 \"font-family\"、\"font-size\"。\r\n\r\n-----\r\n##### 任务:  \r\n将`text`元素的`font-size`设置为 25px，文本颜色设置为 red。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"标签应该都具有红色的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('text').css('fill') == 'rgb(255, 0, 0)'\"\r\n   },\r\n   { \r\n    \"text\": \"标签应该都具有25像素的<code>font-size</code> 。\",\r\n    \"teststring\": \"$('text').css('font-size') == '25px'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n    \r\n    const w = 500;\r\n    const h = 100;\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => d * 3)\r\n       .attr(\"fill\", \"navy\");\r\n    \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) => d)\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - (3 * d) - 3)\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eebb18a52baf26e943af51a"
  },
  "course_id": 29,
  "title": "使用预定义的比例放置元素",
  "text": "##### 描述:  \r\n当比例尺建立好后，是时候重新映射散点图了。比例尺就像操作函数一样，将 x 和 y 的原数据值变为适合并可在 SVG 画布上正确渲染的值。它们使数据在屏幕的布局区域内部。\r\n\r\n用比例尺函数为 SVG 图形设置坐标属性值。这包括`rect`或者`text`元素的`x`和`y`属性，或者`circles`的`cx`和`cy`。以下是一个例子：\r\n\r\n```\r\nshape\r\n  .attr(\"x\", (d) => xScale(d[0]))\r\n```\r\n比例尺设置图形坐标属性来将数据点放置在 SVG 画布上。当你显示实际数据值时，不用使用比例尺，例如，在提示框或标签中的`text()`方法。\r\n\r\n-----\r\n##### 任务:  \r\n使用`xScale`和`yScale`将circle和`text`图形放置在 SVG 画布上。对于`circles`，使用比例尺设置`cx`和`cy`属性，半径为 5 个单位。\r\n\r\n对于`text`元素，使用比例尺设置`x`和`y`属性。标签应该标注在点的右边，为此，在将 x 数据值传递给`xScale`之前要将它加上 10 个单位。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该有10个<code>circle</code>元素。\",\r\n    \"teststring\": \"$('circle').length == 10\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第一个<code>circle</code>元素应具有大约91的<code>cx</code>值和大约368的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(0).attr('cx')) == '91' && Math.round($('circle').eq(0).attr('cy')) == '368' && $('circle').eq(0).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第二个<code>circle</code>元素的<code>cx</code>值应约为159， <code>cy</code>值应约为181。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(1).attr('cx')) == '159' && Math.round($('circle').eq(1).attr('cy')) == '181' && $('circle').eq(1).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第三个<code>circle</code>元素应具有约340的<code>cx</code>值和约329的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(2).attr('cx')) == '340' && Math.round($('circle').eq(2).attr('cy')) == '329' && $('circle').eq(2).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第四个<code>circle</code>元素应具有大约131的<code>cx</code>值和大约60的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"$Math.round($('circle').eq(3).attr('cx')) == '131' && Math.round($('circle').eq(3).attr('cy')) == '60' && $('circle').eq(3).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第五个<code>circle</code>元素应具有大约440的<code>cx</code>值和大约237的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(4).attr('cx')) == '440' && Math.round($('circle').eq(4).attr('cy')) == '237' && $('circle').eq(4).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第六个<code>circle</code>元素应具有约271的<code>cx</code>值和约306的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(5).attr('cx')) == '271' && Math.round($('circle').eq(5).attr('cy')) == '306' && $('circle').eq(5).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第七个<code>circle</code>元素的<code>cx</code>值约为361， <code>cy</code>值约为351。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(6).attr('cx')) == '361' && Math.round($('circle').eq(6).attr('cy')) == '351' && $('circle').eq(6).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第八个<code>circle</code>元素应具有约261的<code>cx</code>值和约132的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(7).attr('cx')) == '261' && Math.round($('circle').eq(7).attr('cy')) == '132' && $('circle').eq(7).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第九个<code>circle</code>元素应具有大约131的<code>cx</code>值和大约144的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(8).attr('cx')) == '131' && Math.round($('circle').eq(8).attr('cy')) == '144' && $('circle').eq(8).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第十个<code>circle</code>元素应具有大约79的<code>cx</code>值和大约326的<code>cy</code>值。它的<code>r</code>值也应为5。\",\r\n    \"teststring\": \"Math.round($('circle').eq(9).attr('cx')) == '79' && Math.round($('circle').eq(9).attr('cy')) == '326' && $('circle').eq(9).attr('r') == '5'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该有10个<code>text</code>元素。\",\r\n    \"teststring\": \"$('text').length == 10\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第一个标签的<code>x</code>值约为100， <code>y</code>值约为368。\",\r\n    \"teststring\": \"Math.round($('text').eq(0).attr('x')) == '100' && Math.round($('text').eq(0).attr('y')) == '368'\"\r\n   },\r\n   { \r\n    \"text\": \"第二标签应该有一个<code>x</code>的大约168值和<code>y</code>施加鳞后的约181的值。\",\r\n    \"teststring\": \"Math.round($('text').eq(1).attr('x')) == '168' && Math.round($('text').eq(1).attr('y')) == '181'\"\r\n   },\r\n   { \r\n    \"text\": \"应用刻度后，第三个标签的<code>x</code>值约为350， <code>y</code>值约为329。\",\r\n    \"teststring\": \"Math.round($('text').eq(2).attr('x')) == '350' && Math.round($('text').eq(2).attr('y')) == '329'\"\r\n   },\r\n   { \r\n    \"text\": \"第四标签应该有一个<code>x</code>的大约141值和<code>y</code>施加鳞后的约60的值。\",\r\n    \"teststring\": \"Math.round($('text').eq(3).attr('x')) == '141' && Math.round($('text').eq(3).attr('y')) == '60'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第五个标签的<code>x</code>值约为449， <code>y</code>值约为237。\",\r\n    \"teststring\": \"Math.round($('text').eq(4).attr('x')) == '449' && Math.round($('text').eq(4).attr('y')) == '237'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第六个标签的<code>x</code>值约为280， <code>y</code>值约为306。\",\r\n    \"teststring\": \"Math.round($('text').eq(5).attr('x')) == '280' && Math.round($('text').eq(5).attr('y')) == '306'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第七个标签的<code>x</code>值约为370， <code>y</code>值约为351。\",\r\n    \"teststring\": \"Math.round($('text').eq(6).attr('x')) == '370' && Math.round($('text').eq(6).attr('y')) == '351'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第八个标签的<code>x</code>值约为270， <code>y</code>值约为132。\",\r\n    \"teststring\": \"Math.round($('text').eq(7).attr('x')) == '270' && Math.round($('text').eq(7).attr('y')) == '132'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第九个标签的<code>x</code>值约为140， <code>y</code>值约为144。\",\r\n    \"teststring\": \"Math.round($('text').eq(8).attr('x')) == '140' && Math.round($('text').eq(8).attr('y')) == '144'\"\r\n   },{ \r\n    \"text\": \"应用刻度后，第十个标签的<code>x</code>值约为88， <code>y</code>值约为326。\",\r\n    \"teststring\": \"Math.round($('text').eq(9).attr('x')) == '88' && Math.round($('text').eq(9).attr('y')) == '326'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,     78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,   411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,    333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,   123 ]\r\n                ];\r\n    \r\n    const w = 500;\r\n    const h = 500;\r\n    const padding = 60;\r\n    \r\n    const xScale = d3.scaleLinear()\r\n                     .domain([0, d3.max(dataset, (d) => d[0])])\r\n                     .range([padding, w - padding]);\r\n    \r\n    const yScale = d3.scaleLinear()\r\n                     .domain([0, d3.max(dataset, (d) => d[1])])\r\n                     .range([h - padding, padding]);\r\n    \r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n    \r\n    svg.selectAll(\"circle\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"circle\")\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n       \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) =>  (d[0] + \", \"\r\n + d[1]))\r\n       // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n       // 在上面添加你的代码\r\n  </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eebb26952baf26e943af51b"
  },
  "course_id": 28,
  "title": "使用动态比例",
  "text": "##### 描述:  \r\nD3 的`min()`和`max()`方法在设置比例尺时十分有用。\r\n\r\n对于一个复杂的数据集，首要是设置比例尺，这样可视化才能适合 SVG 容器的宽和高。所有数据都应布局在 SVG 画布内部，这样它们在页面上才是可见的。\r\n\r\n下面这个例子为散点图设置了 x 轴的比例尺。`domain()`方法给比例尺传递关于散点图原数据值的信息，`range()`方法给出在页面上进行可视化的实际空间信息。\r\n\r\n在这个例子中，domain 是从 0 到数据集中的最大值，它使用`max()`方法和基于数组中 x 值的回调函数。range 使用 SVG 画布的宽(`w`)并包含 padding，这将在散点图和 SVG 画布边缘之间添加空隙。\r\n\r\n```\r\nconst dataset = [\r\n  [ 34, 78 ],\r\n  [ 109, 280 ],\r\n  [ 310, 120 ],\r\n  [ 79, 411 ],\r\n  [ 420, 220 ],\r\n  [ 233, 145 ],\r\n  [ 333, 96 ],\r\n  [ 222, 333 ],\r\n  [ 78, 320 ],\r\n  [ 21, 123 ]\r\n];\r\nconst w = 500;\r\nconst h = 500;\r\n\r\n// SVG 画布边缘和散点图之间的 padding\r\nconst padding = 30;\r\nconst xScale = d3.scaleLinear()\r\n  .domain([0, d3.max(dataset, (d) => d[0])])\r\n  .range([padding, w - padding]);\r\n```\r\n在一开始可能很难理解 padding。想象 x 轴是一条从 0 到 500 （SVG 画布宽的值）的水平直线。在`range()`方法中包含 padding 使散点图沿着这条直线从 30 （而不是 0）开始，在 470 （而不是 500）结束。\r\n\r\n-----\r\n##### 任务:  \r\n使用`yScale`变量创建一个线性的 y 轴比例尺。`domain`应该从 0 开始到数据集中 y 的最大值，range 应该使用 SVG 的高(`h`)并包含 padding。\r\n\r\n提示<br>\r\n记得正向布局。当你为 y 坐标设置 range 时，大的值（height 减去 padding）是第一个参数，小的值是第二个参数。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>h2</code>的文本应为30。\",\r\n    \"teststring\": \"output == 30 && $('h2').text() == '30'\"\r\n   },\r\n   { \r\n    \"text\": \"'yScale的<code>domain()</code>应该等于<code>[0, 411]</code> 0,411 <code>[0, 411]</code> 。'\",\r\n    \"teststring\": \"JSON.stringify(yScale.domain()) == JSON.stringify([0, 411])\"\r\n   },\r\n   { \r\n    \"text\": \"'yScale的<code>range()</code>应相当于<code>[470, 30]</code> 470,30 <code>[470, 30]</code> 。'\",\r\n    \"teststring\": \"JSON.stringify(yScale.range()) == JSON.stringify([470, 30])\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const dataset = [\r\n                  [ 34,    78 ],\r\n                  [ 109,   280 ],\r\n                  [ 310,   120 ],\r\n                  [ 79,    411 ],\r\n                  [ 420,   220 ],\r\n                  [ 233,   145 ],\r\n                  [ 333,   96 ],\r\n                  [ 222,   333 ],\r\n                  [ 78,    320 ],\r\n                  [ 21,    123 ]\r\n                ];\r\n    \r\n    const w = 500;\r\n    const h = 500;\r\n    \r\n    // SVG 画布边缘和图形之间的padding\r\n    const padding = 30;\r\n    \r\n    // 创建 x 和 y 的比例尺\r\n    \r\n    const xScale = d3.scaleLinear()\r\n                    .domain([0, d3.max(dataset, (d) => d[0])])\r\n                    .range([padding, w - padding]);\r\n    \r\n    // 在下面添加你的代码\r\n    \r\n    const yScale = undefined;\r\n                     \r\n                     \r\n    // 在上面添加你的代码\r\n    \r\n    const output = yScale(411); // 返回 30\r\n    d3.select(\"body\")\r\n      .append(\"h2\")\r\n      .text(output)\r\n  </script>\r\n</body>"
},{
  "_id": {
    "$oid": "5eebb3d952baf26e943af51c"
  },
  "course_id": 27,
  "title": "使用D3在数据集中查找最值",
  "text": "##### 描述:  \r\nD3 的方法`domain()`和`range()`根据数据设置比例尺的信息。下面有几种更简单的方法。\r\n\r\n通常当你设置域的时候，你会想用数据集中的最小值和最大值。尤其是在很大的数据集中，尝试手动的找到这些值可能会出错。\r\n\r\nD3 有两个方法——`min()`和`max()`来返回这些值。下面是一个例子：\r\n\r\n```\r\nconst exampleData = [34, 234, 73, 90, 6, 52];\r\nd3.min(exampleData) // 返回 6\r\nd3.max(exampleData) // 返回 234\r\n```\r\n像在散点图的例子中的 [x, y] 坐标对一样，数据集有可能嵌套数组。在这种情况下，你需要告诉 D3 怎么计算最大值和最小值。\r\n\r\n辛运的是，`min()`和`max()`都可以使用回调函数。\r\n\r\n在下面这个例子中，回调函数的参数`d`是当前的内数组。回调函数需要从内数组中返回你想比较大小的元素（x 还是 y 值）。下面是一个如何找到二维数组的最大值和最小值的例子：\r\n\r\n```\r\nconst locationData = [[1, 7],[6, 3],[8, 3]];\r\n// 返回第一个元素中的最小值s\r\nconst minX = d3.min(locationData, (d) => d[0]);\r\n// 在 1，6，8 中 minX 为 1\r\n```\r\n\r\n\r\n-----\r\n\r\n##### 任务:  \r\n在`positionData`变量中保存一个三维数组。用 D3 的方法去找到数组中 z 坐标（第三个值）的最大值并将它保存在`output`变量中。\r\n\r\n提示<br>\r\n趣事——D3可以绘制三维数组。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>h2</code>的文本应为8。\",\r\n    \"teststring\": \"output == 8 && $('h2').text() == '8'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应使用<code>max()</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.max/g), 'Your code should use the <code>max()</code> method.'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const positionData = [[1, 7, -4],[6, 3, 8],[2, 8, 3]]\r\n    // 在下面添加你的代码\r\n    \r\n    const output = undefined; // 修改这一行\r\n    \r\n    // 在上面添加你的代码\r\n    \r\n    d3.select(\"body\")\r\n      .append(\"h2\")\r\n      .text(output)\r\n  </script>\r\n</body>",
  "concept": [
    "Arrays",
    "max()",
    "min()"
  ]
},{
  "_id": {
    "$oid": "5ef1b3dd44e193dba1e93c61"
  },
  "course_id": 21,
  "title": "给D3元素添加动画效果",
  "text": "#####  描述:\r\n为了使数据更加生动形象，我们可以给图表添加动画过渡效果。这个挑战我们将使用d3的 `transition` 方法来给柱状图添加动画效果。  \r\n接下来我们学习一下新的知识点：\r\n* ` .attr(属性A) .transition() .attr(属性B)` ：`transition` 的标准使用形式，使元素从属性A平滑过渡到属性B\r\n* `.duration(t)`：表示动画持续t毫秒\r\n* `.delay(t)`：表示动画在 t 秒之后开始，当我们需要图表按照所绑定的数据元素顺序依次开始过渡时这个属性特别有用。\r\n* `.ease(e)`：表示过渡方式，常用 `d3.easeCubic` 更多请见[d3-ease](https://github.com/d3/d3-ease/tree/v1.0.6)   \r\n\r\n有了上面的知识后我们就可以实现动画效果了例如：\r\n```\r\nd3.selectAll(\"rect\")\r\n  .data(data)\r\n  .append(\"rect\")\r\n  .transition()\r\n  .duration(1000)\r\n  .delay((d, i)=> i * 100)\r\n  .ease(d3.easeCubic)\r\n  .style(\"background-color\", \"red\");\r\n```\r\n`transition` 类似与 `selection` 用于对 DOM 的属性进行操作，所以 `selection` 的大多数方法同样适用于 `transition`，例如 `transition.attr()`、`transition.style()`、`transition.text()`  等。然而不是全部的方法都适用于 `transition`，例如你不能通过 `transition` 添加新的元素如 `selection.append()` 或者对数据进行绑定如 `selection.data()`。不过我们可以使用 `transition` 的  `selection` 方法来重新返回当前选择集。  \r\n\r\n-----\r\n##### 任务：\r\n在 `append(\"rect\")` 下面使用 `transition` 方法 添加动画效果，要求使用` duration()` 设定动画持续 2 秒,使用 `delay()` 使各个 `rect` 之间开始动画效果的间隔为 100 ms,使用 `ease()` 设定过渡方式为 `easeCubic`。动画完成之后使用 `selection()` 方法返回选择集使得添加 `title` 的代码可以运行。\r\n",
  "goal": "[     \r\n  \r\n   { \r\n    \"text\": \"您的代码应该使用<code>transition</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.transition/g)\"\r\n   },{ \r\n   \"text\": \"您的代码应该使用<code>selection</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.selection/g)\"\r\n   },{ \r\n   \"text\": \"您的代码应该使用<code>duration</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.duration/g)\"\r\n   },{ \r\n   \"text\": \"您的代码应该使用<code>delay</code>方法。\",\r\n    \"teststring\": \"code.match(/\\\\.delay/g)\"\r\n   },{ \r\n  \"text\": \"您的代码应该使用<code>ease</code>方法并使用<code>easeCubic</code>过渡方式。\",\r\n    \"teststring\": \"code.match(/\\\\.ease\\\\(\\\\s*d3.easeCubic\\\\s*\\\\)/g)\"\r\n   },{ \r\n    \"text\": \"您的代码应该包含9个<code>title</code>\",\r\n    \"teststring\": \"$('title').length == 9\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<style>\r\n  .bar:hover {\r\n    fill: brown;\r\n  }\r\n</style>\r\n<body>\r\n  <script>\r\n    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];\r\n\r\n    const w = 500;\r\n    const h = 100;\r\n\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"width\", w)\r\n                  .attr(\"height\", h);\r\n\r\n    svg.selectAll(\"rect\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"rect\")\r\n       // 在下面添加你的代码\r\n \r\n\r\n\r\n       // 在上面添加你的代码\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - 3 * d)\r\n       .attr(\"width\", 25)\r\n       .attr(\"height\", (d, i) => d * 3)\r\n       .attr(\"fill\", \"navy\")\r\n       .attr(\"class\", \"bar\")\r\n       // 在下面添加你的代码\r\n \r\n\r\n\r\n       // 在上面添加你的代码\r\n       .append(\"title\")\r\n       .text(d=>d)\r\n       \r\n    svg.selectAll(\"text\")\r\n       .data(dataset)\r\n       .enter()\r\n       .append(\"text\")\r\n       .text((d) => d)\r\n       .attr(\"x\", (d, i) => i * 30)\r\n       .attr(\"y\", (d, i) => h - (d * 3 + 3))\r\n\r\n  </script>\r\n</body>",
  "concept": [
    "Eases",
    "Transitions",
    "delay()",
    "duration()",
    "ease()",
    "transition()"
  ]
},{
  "_id": {
    "$oid": "5ef36d1f44e193dba1e93c62"
  },
  "course_id": 31,
  "title": "使用D3读取文件",
  "text": "##### 描述：\r\n一般我们不建议直接从前端读取本地的文件，这主要是出于安全性的考虑。但是如果我们有时候又确实有需要这么做，d3 为我们提供了一系列方法来方便的提取本地文件例如：\r\n```\r\nd3.text(\"/path/to/file.txt\").then(function(text) {\r\n  console.log(text); // Hello, world!\r\n});\r\n```\r\n```\r\nd3.csv(\"/path/to/file.csv\").then(function(data) {\r\n  console.log(data); // [{\"Hello\": \"world\"}, …]\r\n});\r\n```  \r\n这些方法还有其他可选参数用来对数据格式进行转换如:\r\n```\r\nd3.csv(\"test.csv\", function(d) {\r\n  return {\r\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\r\n    make: d.Make,\r\n    model: d.Model,\r\n    length: +d.Length // convert \"Length\" column to number\r\n  };\r\n}).then(function(data) {\r\n  console.log(data);\r\n});\r\n\r\nd3.csv(\"test.csv\", d3.autoType).then(function(data) {\r\n  console.log(data);\r\n});\r\n```\r\n第二个参数是一个格式转换函数，用来对输入数据进行数据处理,通常我们可以直接使用d3自带的通用数据转换函数`d3.autoType` 对一般的数据如日期，数字等进行数据类型转换。  \r\nd3 的 [fetch](https://github.com/d3/d3-fetch/tree/v1.1.2) 模块 内置了对json、csv、tsv、xml 等文件的解析支持。\r\n \r\n -----\r\n ##### 任务：\r\n 使用 d3.csv 读取服务器上地址为 ```/data/income.csv``` 的文件",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>csv</code>方法并设置文件路径为/data/income.csv\",\r\n    \"teststring\": \"code.match(/\\\\.csv\\\\(\\\\s*['\\\"]\\\\s*\\\\/data\\\\/income\\\\.csv['\\\"]\\\\s*\\\\)\\\\s*/g)\"\r\n   }\r\n    \r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  //在下面添加你的代码  \r\n  .then(function(data){ //改动这一行\r\n      d3.select(\"body\")\r\n      .append(\"div\")\r\n      .text(JSON.stringify(data))\r\n  })\r\n  \r\n  </script>\r\n</body>\r\n",
  "concept": [
    "autoType",
    "csv()",
    "json()"
  ]
},{
  "_id": {
    "$oid": "5ef496a6af46d8f770865697"
  },
  "course_id": 39,
  "title": "使用D3绘制堆叠面积图",
  "text": "##### 描述：\r\n堆叠面积图是一种特殊的折线图，可以用来比较在一个区间内的多个变量。堆叠面积图和折线图的区别在于，堆叠面积图每个数据系列的起点都是基于前一个数据系列的，同时堆叠面积图在数据系列的曲线之间填充了颜色，也就是说每度量一行就要填满行与行之间的区域。  \r\n如果有多个数据系列，并想分析每个类别的部分到整体的关系，并展现部分量对于总量的贡献时，使用堆积面积图是非常合适的选择。例如下图显示 2000–2010 期间不同行业的失业人数波动情况。\r\n![](../data/chart.svg)\r\n通过之前的学习相信你已经发现D3在绘制图形时不是采用：给定函数，用户输入数据，函数输出图形的形式。而是把数据转换和图形绘制分开，虽然这会对初学者带来理解上的困难但是却能带来极大的自由度。  \r\n接下来我们将学习如何使用将数据转换成适合堆叠面积图的`stack()`方法。和之前我们用来绘制饼图的 `pie()` 方法类似，`stack()`方法也不是直接输出图形。相反，它计算出的位置可以传递给区域生成器 `area()` 或直接使用。  \r\n`stack` 方法的输入为原始数据，然后输出以原始数据中各个属性值组成的数据系列数组(series)。数据系列的顺序由`stack.keys()`来决定。每一个系列相当于一个折线图的点数组，其中每个点  j  对应输入数据的第 j 个元素。 每个点用数组[y0, y1]表示，其中 y0 是下限值（和前一个serie的第 j 个点的 y1 相等），y1 是上限值（和后一个系列的第 j 个点的 y0 相等）。  \r\n考虑下面的水果每月销售数据\r\n```\r\nvar data = [\r\n  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\r\n  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\r\n  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, dates: 400},\r\n  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, dates: 400}\r\n];\r\n```\r\n为了得到堆叠数据结构：\r\n```\r\nvar stack = d3.stack()\r\n    .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\r\n  \r\nvar series = stack(data);\r\n```\r\n由此产生的数组每个系列对应一种水果。每个系列每月有一个点，每个点有一个下限和上限。\r\n```\r\n[\r\n  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples\r\n  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas\r\n  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries\r\n  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // dates\r\n]\r\n```   \r\n\r\n-----\r\n##### 任务：\r\n改变变量`stack`的值设置堆叠生成器，并使用`stack.keys()`指定系列的顺序为`columns`数组中的值的顺序。改变series变量的值为通过将`data`传入`stack`后返回的堆叠数据。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>stack</code>方法并使用stack.keys()指定系列的顺序为<code>columns</code>数组中的值的顺序\",\r\n    \"teststring\": \"code.match(/d3\\\\.stack\\\\(\\\\s*\\\\).*?\\\\n?.*?\\\\.keys\\\\(\\\\s*columns\\\\s*\\\\)/g)\"\r\n   },\r\n    { \r\n    \"text\": \"您应该通过把<code>data</code>传入<code>stack()</code>方法来生成堆叠数据\",\r\n    \"teststring\": \"code.match(/stack\\\\(\\\\s*data\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>\r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  d3.csv('../data/unemployment.csv',d3.autoType).then(function(data){\r\n     /* console.log(data) \r\n     Array(122)[0:Object{date: 2000-01-01, Wholesale and Retail Trade: 1000...},\r\n                1:Object{date: 2000-02-01, Wholesale and Retail Trade: 1023...},\r\n                ...\r\n                121:Object{date: 2010-02-01, Wholesale and Retail Trade: 2071...}\r\n               ] */\r\n    d3.select(\"body\")\r\n      .append(\"h3\")\r\n      .text(\"data[0]: \"+JSON.stringify(data[0]))\r\n    \r\n    const columns = ['Agriculture','Business services','Construction',\r\n                     'Education and Health','Finance','Government',\r\n                     'Information','Leisure and hospitality','Manufacturing',\r\n                     'Mining and Extraction','Other','Self-employed',\r\n                     'Transportation and Utilities','Wholesale and Retail Trade'\r\n                     ] \r\n    //在下面输入您的代码                 \r\n    stack = undefined  //在这里创建stack生成器\r\n    \r\n    series = undefined //在这里使用stack生成堆叠数据\r\n    //在上面输入您的代码  \r\n    d3.select(\"body\")\r\n      .append(\"h3\")\r\n      .text(\"series[0]: \"+ JSON.stringify(series[0]))\r\n  })\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "stack()"
  ]
},{
  "_id": {
    "$oid": "5efafec425c55250a7981a2b"
  },
  "course_id": 40,
  "title": "D3时间比例尺",
  "text": "##### 描述：\r\n得到堆叠数据之后我们就可以开始准备绘制图形了，在此之前我们还需要设置X轴和Y轴两个比例尺来确保数据不会超出SVG矢量图的长宽大小。由于X轴坐标是时间所以我们需要使用D3提供的时间比例尺`scaleTime()`来对数据进行转化，时间比例尺是一种特殊的线性比例尺，它的`domain`需要是一个时间范围，而`range`则和线性比例尺一样是一段连续的数值区间。  \r\n  例如：\r\n```\r\nvar x = d3.scaleTime()\r\n          .domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]) //月份范围是0~11\r\n          .range([0, 960]);\r\n\t\t\t\t\t\r\nx(new Date(2000, 0, 1,  5)); // 200\r\n```\r\n\r\n-----\r\n##### 任务:\r\n创建时间比例尺并将 `domain` 设为 `2000-1-1~2001-1-1`, `range` 设为 `0~500`",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>scaleTime</code>方法\",\r\n    \"teststring\": \"code.match(/\\\\.scaleTime\\\\(\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>domain</code>的范围应该为<code>Date(2000,0,1)~Date(2001,0,1)</code>\",\r\n    \"teststring\": \"code.match(/\\\\.domain\\\\(\\\\s*\\\\[\\\\s*new\\\\s*Date\\\\(\\\\s*2000\\\\s*,\\\\s*0\\\\s*,\\\\s*1\\\\)\\\\s*,\\\\s*new\\\\s*Date\\\\(2001\\\\s*,\\\\s*0\\\\s*,\\\\s*1\\\\s*\\\\)\\\\s*\\\\]\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>h3</code>标签的值应该为500\",\r\n    \"teststring\": \"$('h3').text() == 500\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n <script>\r\n const xScale = undefined\r\n \r\n d3.select(\"body\")\r\n   .append(\"h3\")\r\n   .text(xScale(new Date(2001,0,1)))\r\n \r\n </script>\r\n</body>\r\n",
  "concept": [
    " Date()",
    "scaleTime()"
  ]
},{
  "_id": {
    "$oid": "5efb0ad84b260f8b46a87b99"
  },
  "course_id": 41,
  "title": "使用extent来获取数据的最值区间",
  "text": "##### 描述\r\n当我们需要知道数组中的值所在的范围时可以使用d3.min 和 d3.max来分别获取最大最小值也可以直接使用d3.extent来获取数据的最大最小值区间。  \r\n例如下面两种方法是等价的\r\n```\r\narr = [1,2,3,4,5,6]\r\n[d3.min(arr,d=>d),d3.max(arr,d=>d)] //[1,6]\r\nd3.extent(arr,d=>d) // [1,6]\r\n```\r\n\r\n----\r\n##### 任务\r\n使用从文件中读取的数据来设定时间比例尺的`domain`域，您需要使用 `extent` 来获取data的date字段的最大最小值区间",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该在<code>domain</code>中使用<code>extent</code>方法\",\r\n    \"teststring\": \"code.match(/d3\\\\.extent/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  d3.csv('../data/unemployment.csv',d3.autoType).then(function(data){\r\n    \r\n    const width = 500\r\n    const height = 500\r\n    const columns = ['Agriculture','Business services','Construction',\r\n                     'Education and Health','Finance','Government',\r\n                     'Information','Leisure and hospitality','Manufacturing',\r\n                     'Mining and Extraction','Other','Self-employed',\r\n                     'Transportation and Utilities','Wholesale and Retail Trade'\r\n                     ] \r\n    const stack = d3.stack()\r\n                    .keys(columns)\r\n    const series = stack(data) \r\n    \r\n    const y = d3.scaleLinear()\r\n    .domain([0, d3.max(series[series.length-1],d=>d[1])])\r\n    .range([height, 0])\r\n    \r\n    //在下面输入您的代码                 \r\n    const x = d3.scaleTime()\r\n    .domain()//在这一行补充您的代码\r\n    .range([0,width])\r\n     //在上面输入您的代码 \r\n\r\n    \r\n \r\n  })\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "extent"
  ]
},{
  "_id": {
    "$oid": "5efb3b4428217464022f9ae7"
  },
  "course_id": 42,
  "title": "使用area方法绘制堆叠面积图",
  "text": "##### 描述：\r\n这一节我们将使用面积生成器`d3.area()`来生成绘制堆叠图的`<path>`路径数据字符串。面积生成器可以生成一个面积区域。一个面积区域由两条边界线定义，每条边界线相当于一条折线。通常情况下，两条线的 `x` 值相同`(x0 = x1)`，只有` y `值不同`(y0 和 y1)`；最常见的是，`y0` 被定义为代表零的常数（这样就像是上了色的折线图）： \r\n![](../data/area_chart.png)\r\n`area(data)`需要输入的参数`data`是一个数组,然后根据创建`area`时定义的规则来读取数组中每一个点中与面积区域参数 `x`,`y0`,`y1` 所对应的属性，坐标面积区域的第一条线(顶线)由 `x` 和 `y1` 定义；第二条线(基线)由 `x` 和 `y0` 定义。例如我们可以这样定义` area` 的规则：\r\n```\r\nvar data = [\r\n  {date: new Date(2007, 3, 24), value: 93.24},\r\n  {date: new Date(2007, 3, 25), value: 95.35},\r\n  {date: new Date(2007, 3, 26), value: 98.84},\r\n  {date: new Date(2007, 3, 27), value: 99.92},\r\n  {date: new Date(2007, 3, 30), value: 99.80},\r\n  {date: new Date(2007, 4,  1), value: 99.47},\r\n  …\r\n];\r\n\r\nvar area = d3.area()\r\n    .x(function(d) { return x(d.date); }) //x是时间比例尺\r\n    .y1(function(d) { return y(d.value); })//y是线性比例尺\r\n    .y0(y(0));//y0固定为0\r\n\r\n\r\nd3.append(\"path\")\r\n  .attr(\"d\",area(data))//通过面积生成器输出的路径字符串进行绘制\r\n  .attr(\"fill\",\"navy\")\r\n```\r\n  \r\n-----\r\n##### 任务：\r\n创建面积生成器 `area`，`x` 坐标为` xScale(d.data.date)` , `y0` 坐标为` yScale(d[0])` , ` y1` 坐标为` yScale(d[1])` 。为 `path` 添加 `d` 属性其值为将数据传入 `area` 后返回的路径字符串。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>area</code>创建面积生成器\",\r\n    \"teststring\": \"code.match(/\\\\.area\\\\(\\\\)\\\\s*?\\\\n?\\\\s*?\\\\.x\\\\s*\\\\(\\\\s*.\\\\s*=>\\\\s*xScale\\\\(\\\\s*.\\\\.data.date\\\\s*\\\\)\\\\s*\\\\)\\\\s*?\\\\n?\\\\s*?\\\\.y0\\\\(\\\\s*.\\\\s*=>\\\\s*yScale\\\\(\\\\s*.\\\\[\\\\s*0\\\\s*\\\\]\\\\s*\\\\)\\\\s*\\\\)\\\\s*?\\\\n?\\\\s*?\\\\.y1\\\\(\\\\s*.\\\\s*=>\\\\s*yScale\\\\(\\\\s*.\\\\[\\\\s*1\\\\s*\\\\]\\\\s*\\\\)\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您应该为<code>path</code>添加<code>d</code>属性\",\r\n    \"teststring\": \"code.match(/\\\\.attr\\\\(\\\\s*[\\\"']d[\\\"']\\\\s*,\\\\s*.\\\\s*=>\\\\s*area\\\\(\\\\s*.\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  d3.csv('../data/unemployment.csv',d3.autoType).then(function(data){\r\n    \r\n    const width = 950\r\n    const height = 500\r\n    const columns = ['Agriculture','Business services','Construction',\r\n                     'Education and Health','Finance','Government',\r\n                     'Information','Leisure and hospitality','Manufacturing',\r\n                     'Mining and Extraction','Other','Self-employed',\r\n                     'Transportation and Utilities','Wholesale and Retail Trade'\r\n                     ]\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n      .attr(\"viewBox\", [0, 0, width, height])\r\n    const stack = d3.stack()\r\n                    .keys(columns)\r\n    const series = stack(data) \r\n    \r\n    const yScale = d3.scaleLinear()\r\n    .domain([0, d3.max(series[series.length-1],d=>d[1])])\r\n    .range([height, 0])\r\n    \r\n    const xScale = d3.scaleTime()\r\n    .domain(d3.extent(data,d=>d.date))\r\n    .range([0,width])\r\n\r\n    const color = d3.scaleOrdinal()\r\n    .domain(columns)\r\n    .range(d3.schemeCategory10)\r\n    \r\n     //在下面添加您的代码\r\n    const area = undefined\r\n      //在上面添加您的代码\r\n    svg.append(\"g\")\r\n    .selectAll(\"path\")\r\n    .data(series)\r\n    .enter()\r\n    .append(\"path\")\r\n    .attr(\"fill\", d => color(d.key))\r\n      //在下面添加您的代码\r\n      \r\n      //在上面添加您的代码\r\n    .append(\"title\")\r\n      .text(d => d.key);\r\n \r\n  })\r\n  </script>\r\n</body>",
  "concept": [
    "area()"
  ]
},{
  "_id": {
    "$oid": "5efef9cb60df4cd4c418326b"
  },
  "course_id": 43,
  "title": "弦图介绍",
  "text": "##### 描述：\r\n弦图（Chord Diagram）, 通常用于表示一组元素之间的联系。假设我们现在有一个描述四个城市之间人口流动的数据矩阵M( 4×4 )如下，第 i 行 j 列的数据表示从第 i 个城市流出到第 j 个 城市的人数（单位：万人）。例如，M[1,3] 表示从 A 城流向 C 城的人数为 30 万人。  \r\n\r\n|   |  A  | B   | C   | D   |\r\n|:-:|:---:|:---:|:---:|:---:|\r\n| A | 130 | 90  | 30  | 20  |\r\n| B | 70  | 300 | 50  | 50  |\r\n| C | 35  | 75  | 160 | 12  |\r\n| D | 20  | 60  | 30  | 100 |\r\n\r\n\r\n接下来我们结合这个人口流动数据的可视化结果来对弦图进行详细的讲解。如图所示，弦图可以分为两个部分：外部的”环“所表示的节点以及内部的”弦“所表示的节点之间的边。弦图外圆上相互分隔的几段圆环分别表示矩阵中的 A,B,C,D 四个城市，即节点。节点的大小为该节点所在行的总和进而决定圆环的弧长，例如 蓝色的 A 节点的大小为 130 + 90 + 30 + 20 = 270。  \r\n从一个元素到另一个元素绘制弧，表示两个元素相关，弧的宽度表示权重，这就是弦。例如 (A,B) = 90 , (B,A) = 70 构成了一条连接 A,B 的弦。由于A流入到B的人数大于 B 流入到 A 的人数，所以这条弦用 B 的橙色表示。  \r\n矩阵里还有 (A,A)、(B,B) 等值，这些值反映到弦图里，是一段从某元素节点出来最后又回到此节点的弦。\r\n\r\n![](../data/chord_chart.svg)  \r\n\r\n____\r\n##### 任务：\r\n本节没有任务，直接进行下一节吧！",
  "goal": "  \r\n  ",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eff31e7984f6cc210ab22e3"
  },
  "course_id": 48,
  "title": "用D3创建力导向图",
  "text": "##### 描述：\r\n当我们需要通过可视化来展示关系网络时，通常我们会选择节点链接图。通过节点表示网络中的实体，通过节点与节点的连线——链接来表示两个实体之间的关系。这样的方法不仅直观而且绘制起来也很简单。但是节点链接图也有它的缺点，例如，如果给的节点数据没有提供坐标信息的话我们就需要自己来给它们添加额外的坐标信息，那么如何确定他们在坐标系中的位置才能既不拥挤又较好的保留原有的节点聚类关系就是一个挑战。另外，当数据集为一个非常复杂的大型关系网络时如何避免节点重叠和连线交叉的问题也是挑战。而力导向图正好可以解决这些问题。\r\n力导向图（`Force-Directed Graph`），是绘图的一种算法。在二维或三维空间里配置节点，节点之间用线连接，称为连线。各连线的长度几乎相等，且尽可能不相交。节点和连线都被施加了力的作用，力是根据节点和连线的相对位置计算的。根据力的作用，来计算节点和连线的运动轨迹，并不断降低它们的能量，最终达到一种能量很低的稳定状态。\r\n\r\n我们可以把整个关系网络想象成一个物理仿真系统(`Simulation`)。系统中的每个节点(`Node`)都是一个带有能量的粒子，粒子与粒子之间存在斥力（如模拟库伦斥力），而被连线(`Link`)所连结的粒子受到牵引力（如模拟胡克弹力）。简单来讲，就是让任意两点之间都存在斥力，可以使它们不会相距太近；同时让有关系的点之间存在引力，可以使它们不会相距太远。  \r\n![](../data/forces.jpg)  \r\nD3.js 中内置了几种经典的力模型通过对力的仿真然后实现节点链接图的布局:\r\n```\r\nvar simulation = d3.forceSimulation(nodes)\r\n    .force(\"charge\", d3.forceManyBody()) //N体力，可以理解为每个节点之间的斥力\r\n    .force(\"link\", d3.forceLink(links))//连接力，可以理解为有关系的两个节点之间的吸引力\r\n    .force(\"center\", d3.forceCenter(100，100));//中心力 ，可以理解为整个力导向图中心点所在的坐标位置\r\n```\r\n其中force表示不同的力模型。每一种力模型都有各自的效果更多[请参考](https://github.com/d3/d3-force/tree/v1.2.1)\r\n一个力仿真模型可以添加不限个数种力，`.force(name,force)`的第一个参数`name`是为添加的力命名,然后我们可以通过名称来获取某一具体的力并对其进行更改（如果有需要的话）。例如:\r\n```\r\nconsole.log(simulation.force(\"charge\"))\r\n//ƒ c(r){var i,o=t.length,a=wa(t,Ca,Pa).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],a.visit(l)}\r\n```\r\n\r\n\r\n\r\n----\r\n##### 任务：\r\n新建力仿真模型赋值给`simulation`变量，绑定节点数据并为其添加`d3.forceManyBody()`,`d3.forceLink()`,`forceCenter()`三种力,其中中心点设为（200，250）",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.forceSimulation()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.forceSimulation/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.forceLink()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.forceLink/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.forceManyBody()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.forceManyBody/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.forceCenter()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.forceCenter/)\"\r\n   },\r\n   { \r\n    \"text\": \"中心点应该设置为<code>(200,250)</code>\",\r\n    \"teststring\":  \"code.match(/(\\\\s*200\\\\s*,\\\\s*250\\\\s*)/)\"\r\n   }\r\n    ]\r\n    ",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        // 在下面添加你的代码\r\n       \r\n        const simulation = undefined\r\n\r\n\r\n        // 在上面添加你的代码\r\n\r\n    </script>\r\n</body>",
  "concept": [
    "forceSimulation()"
  ]
},{
  "_id": {
    "$oid": "5eff41e8984f6cc210ab22e4"
  },
  "course_id": 44,
  "title": "使用D3方法进行数据转换",
  "text": "##### 描述：\r\n还是老规矩，先对数据进行转换再绘制图形。 我们给定的数据是一个矩阵，D3提供了弦转换器 `d3.chord()` 方法来将矩阵数据转化为绘制弦图所需要的数据结构。`chord` 方法要求输入的参数为非负的 N×N 矩阵,N 为节点数。例如：\r\n```\r\nvar matrix = [\r\n  [11975,  5871, 8916, 2868],\r\n  [ 1951, 10048, 2060, 6171],\r\n  [ 8010, 16145, 8090, 8045],\r\n  [ 1013,   990,  940, 6907]\r\n];\r\n```\r\n`chord` 方法返回的数据是一个由所有弦组成的数组 `chords` 以及一个包含所有节点的子数组 `chords.groups` 这两部分分别对应矩阵的边和节点。  结构如下：\r\n![](../data/chord_data_struct.png)  \r\n弦结构其实是两段圆弧加上连接两段弧的曲线所围成的面积，所以只要给定了两段弧的位置那么弦的位置就可以确定了。两段弧分别对应两个属性:  \r\n* source - 起始弧\r\n* target - 目标弧    \r\n\r\n\r\n  source 总是代表组成该弦的矩阵单元 (i,j) 和 (j,i) 中数值更大的那个，source 和 target 又分别包含下面的5个属性:\r\n* startAngle - 弧的起始弧度 (注意弧度和角度的区别 2π弧度=360°)\r\n* endAngle - 弧的终止弧度\r\n* value - 矩阵单元(i,j)的值\r\n* index - 行号 i\r\n* subindex - 列号 j  \r\n\r\n\r\n子数组 `chords.groups`  大小为N 每一个元素表示一个节点对应弦图外部的一段圆环。每一个节点都包含如下属性：\r\n* index - 行索引号，从 0 开始\r\n* startAngle - 圆环的起始弧度\r\n* endAngle - 圆环的终止弧度\r\n* value - 该节点所在行的所有数值的和  \r\n\r\n看到 startAngle 和 endAngle 是否会让你想起之前用到的 `d3.arc()` 方法呢？ 没错我们待会就要用它来画弦图的外部圆环。     \r\n数据介绍完毕了我们来试着定义弦转换器:  \r\n```\r\nd3.chord()\r\n    .padAngle(0.1)//圆环之间的间距\r\n\t\t.sortGroups(d3.ascending) //对节点进行升序排序\r\n\t  .sortSubgroups(d3.ascending) // 对各节点所在行的数据进行升序排序\r\n\t\r\n\tchords = chord(matrix) // 对矩阵进行数据转换\r\n```\r\nchord 还有其他方法不过我们现在只需要用上面的几个就够了，更多请参考[d3-chord](https://github.com/d3/d3-chord/blob/v1.0.6/README.md#d3-chord)\r\n\r\n\r\n----\r\n##### 任务：\r\n创建弦生成器并设置 `padAngle` 为 0.05 弧度， 对各节点所在行数据降序排序 `d3.descending`\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>chord</code>方法\",\r\n    \"teststring\": \"code.match(/d3\\\\.chord/g)\"\r\n   },\r\n     { \r\n    \"text\": \"您应该使用<code>padAngle</code>方法并设置间隔为0.05\",\r\n    \"teststring\": \"code.match(/\\\\.padAngle\\\\(\\\\s*0.05\\\\s*\\\\)/g)\"\r\n   },\r\n      { \r\n    \"text\": \"您应该使用<code>sortSubgroups</code>方法并设置比较函数为d3.descending\",\r\n    \"teststring\": \"code.match(/\\\\.sortSubgroups\\\\(\\\\s*d3\\\\.descending\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const data = [\r\n      [130,  90, 30, 20],\r\n      [ 70,300 ,50 , 50],\r\n      [ 35, 75, 160, 12],\r\n      [ 20,  60,  30, 100]\r\n    ]\r\n    const chord = undefined //在这里修改你的代码\r\n    \r\n    \r\n    const chords = chord(data)\r\n    d3.select(\"body\")\r\n    .append(\"text\")\r\n    .text(JSON.stringify(chords))\r\n    .append(\"tspan\")\r\n    .text(JSON.stringify(chords.groups))\r\n  </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eff942e6321bbe296777f8c"
  },
  "course_id": 53,
  "title": "向力导向图的连线和节点上添加标签",
  "text": "##### 描述：\r\n之前我们已经讲过如何向散点图的`Circles`添加标签，这次我们也可以添加本文为力导向图中的连线创建标签。\r\n\r\n在连线上，我们要显示连线上独立的值，分别为连线集中的每一个连线对象添加对应的‘relation’字段，字段意味着连线所连接的两个节点直接的关系属性。\r\n\r\n在节点上，我们要显示节点上独立的值，分别为节点集中的每一个节点对象添加对应的‘name’字段，字段节点所对应的名称属性。\r\n\r\n在连线和节点上添加的标签，我们需要在tick监听中设定标签的位置，使其能够跟着连线和节点的移动动态调整坐标，下面的代码将连线标签放置在连线一侧点的位置，节点标签放置在和节点重合的位置。\r\n```\r\nlinkText\r\n    \t\t\t.attr(\"x\", (d) => d.source.x)\r\n          .attr(\"y\", (d) => d.source.y);\r\nnodeText\r\n          .attr(\"x\", d => d.x)\r\n          .attr(\"y\", d => d.y);\r\n```\r\n----\r\n##### 任务：\r\n给连线和节点添加标签。你需要用到`g`元素和`selectAll()`、`data()`、`enter()`、`append()`、`text()`方法。\r\n\r\n在`tick`监听中设定标签的位置，并将连线标签设定在连线的中间位置，节点标签设定在节点的x方向-5、y方向-10的位置。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>selectAll()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.selectAll/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>data()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.data/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>enter()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.enter/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>text()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.text/)\"\r\n   },\r\n   { \r\n    \"text\": \"连线标签x坐标应该设定在连线的中间位置\",\r\n    \"teststring\":  \"code.match(/(\\\\s*d\\\\.source\\\\.x\\\\s*+\\\\s*d\\\\.target\\\\.x\\\\s*)\\\\s*\\\\/\\\\s*2/)\"\r\n   },\r\n   { \r\n    \"text\": \"连线标签y坐标应该设定在连线的中间位置\",\r\n    \"teststring\":  \"code.match(/(\\\\s*d\\\\.source\\\\.y\\\\s*+\\\\s*d\\\\.target\\\\.y\\\\s*)\\\\s*\\\\/\\\\s*2/)\"\r\n   },\r\n   { \r\n    \"text\": \"节点标签x坐标应该设定在节点的x方向-5位置\",\r\n    \"teststring\":  \"code.match(/d\\\\.x\\\\s*-\\\\s*5/)\"\r\n   },\r\n   { \r\n    \"text\": \"节点标签y坐标应该设定在节点的y方向-10位置\",\r\n    \"teststring\":  \"code.match(/d\\\\.y\\\\s*-\\\\s*10/)\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).distance((d)=>d.value*100))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        //绘制连线\r\n        const link = svg.append(\"g\")\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .enter()\r\n            .append(\"line\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 1);\r\n        //绘制节点\t\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10)\r\n            .call(d3.drag()\r\n    \t\t    .on(\"start\",started)\r\n    \t        .on(\"drag\",dragged)//力导向图可以被拖动\r\n    \t\t    .on(\"end\",ended)\r\n    \t\t);\r\n        // 在下面添加你的代码\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        // 在上面添加你的代码\r\n        //添加tick监听\r\n        simulation.on(\"tick\", () => {\r\n            link\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n            node\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n            // 在下面添加你的代码\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            // 在上面添加你的代码\r\n        });\r\n        function started(d){\r\n    \t\tif(!d3.event.active){\r\n    \t\t\tsimulation.alphaTarget(0.8).restart();//设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\r\n    \t\t}\r\n    \t\td.fx = d.x;\r\n    \t\td.fy = d.y;\r\n    \t}\r\n    \tfunction dragged(d){\r\n    \t\td.fx = d3.event.x;\r\n    \t\td.fy = d3.event.y;\r\n    \t}\r\n    \tfunction ended(d){\r\n    \t\tif(!d3.event.active){\r\n    \t\t\tsimulation.alphaTarget(0);\r\n    \t\t}\r\n    \t\td.fx = null;\r\n    \t\td.fy = null;\r\n    \t}\r\n    </script>\r\n</body>\r\n\r\n        \r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5eff965c6321bbe296777f8d"
  },
  "course_id": 51,
  "title": "给力导向图添加tick事件监听器",
  "text": "##### 描述：\r\n到目前为止，我们所需要的画板上的图形元素就具备了，但可见的是我们的图形元素都在区域的左上角，我们需要将图形元素变成我们需要的样子。\r\n\r\n在之前绘制力导向图的过程中，我们只是定义了力导向图的节点和连线，而并没有指定它们的位置，由于力导向图是不断运动的，每一时刻都在发生更新，因此，必须不断更新节点和连线的位置。力导向图是时刻更新的，更新之后节点的坐标会变化，图形元素当然也需要更新。因此，还需设置一个监听器，当力导向图更新时，更新所有的图形元素。\r\n\r\n```\r\nsimulation.on(typenames, [listener]) <>\r\n```\r\n利用上面的方法，可为三种事件设定监听器：`start`、`tick`、`end`。其中，`start`是刚开始运动，`end`是运动停止，`tick`是表示运动的每一步。因此，只需为`tick`事件设置监听器即可。`simulation.js`中的`tick`会不停的执行，遍历`forces`，更新坐标位置。\r\n\r\n对于这个API，官方有着更加详尽的解释[请参考](https://github.com/d3/d3-force/tree/v1.2.1)\r\n\r\n我们来添加`tick`事件监听器，来实时更新里力导向图中点和线的坐标。\r\n\r\n对于连线，我们需要`svg`中连线的`x1`、`x2`、`y1`、`y2`属性，其中\r\n`x1` 属性在 x 轴定义线条的开始；\r\n`y1` 属性在 y 轴定义线条的开始；\r\n`x2` 属性在 x 轴定义线条的结束；\r\n`y2` 属性在 y 轴定义线条的结束；\r\n我们需要两个点来确定一条直线，即添加`x1`、`x2`、`y1`、`y2`属性，通过回调函数来确定线的位置。\r\n\r\n对于节点，我们需要`svg`中节点的`cx`、`cy`属性，其中\r\ncx和cy属性定义圆点的x和y坐标。如果省略cx和cy，圆的中心会被设置为(0, 0)。\r\n我们则添加`cx`、`cy`属性，通过回调函数确定点的位置。\r\n\r\n```\r\nsimulation.on(\"tick\", () => {\r\n            link\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n            node\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n            });\r\n```\r\n\r\n\r\n除了`tick`事件，还可以为`start`和`end`事件添加监听器，例如在运动开始和结束时在控制台输出文字，这样可以更好地理解力导向图什么时候开始作用，什么时候停止作用。\r\n\r\n\r\n```\r\n//力导向图运动开始时\r\nsimulation.on(\"start\", function(){\r\n\t\t\tconsole.log(\"运动开始\");\r\n});\r\n//力导向图运动结束时\r\nsimulation.on(\"end\", function(){\r\n\t\t\tconsole.log(\"运动结束\");\r\n});\r\n```\r\n----\r\n##### 任务：\r\n给力导向图添加`tick`事件监听器。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>simulation.on</code>方法\",\r\n    \"teststring\":  \"code.match(/simulation\\\\.on/)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>的<code>x1</code>值不应为空。\",\r\n    \"teststring\": \"$('line').eq(0).attr('x1') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>的<code>y1</code>值不应为空。\",\r\n    \"teststring\": \"$('line').eq(0).attr('y1') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>的<code>x2</code>值不应为空。\",\r\n    \"teststring\": \"$('line').eq(0).attr('x2') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>的<code>y2</code>值不应为空。\",\r\n    \"teststring\": \"$('line').eq(0).attr('y2') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>circle</code>的<code>cx</code>值不应为空。\",\r\n    \"teststring\": \"$('circle').eq(0).attr('cx') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>circle</code>的<code>cy</code>值不应为空。\",\r\n    \"teststring\": \"$('circle').eq(0).attr('cy') != null\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n         //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).distance((d)=>d.value*100))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        //绘制连线\r\n        const link = svg.append(\"g\")\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .enter()\r\n            .append(\"line\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 1);\r\n        //绘制节点\t\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10);\r\n        // 在下面添加你的代码\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        // 在上面添加你的代码 \r\n    </script>\r\n</body>",
  "concept": [
    "forceSimulation.on()",
    "tick()"
  ]
},{
  "_id": {
    "$oid": "5eff96786321bbe296777f8e"
  },
  "course_id": 52,
  "title": "使力导向图可拖拽",
  "text": "##### 描述：\r\n我们已经得到了一个完整的力导向图，接下来我们需要实现让力导向图中的节点可以被拖拽。\r\n\r\n```\r\nconst node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10)\r\n            .call(d3.drag()\r\n    \t\t          .on(\"start\",started)\r\n    \t            .on(\"drag\",dragged)//力导向图可以被拖动\r\n    \t\t          .on(\"end\",ended)\r\n\t\t\t\t\t\t\t\t\t);\r\n```\r\n\r\n上面的代码使用了`d3.drag()`，这是力导向布局的拖曳行为。对于拖拽行为，一次拖拽事件你可以定义三个阶段的监听函数，先定义一个`d3.drag()`，然后给`start/drag/end`分别赋予不同的响应函数。\r\n`on`代表一个事件，可有`start`、`drag`、`end`可选。顾名思义，`start`在拖拽之前发生，`drag`是拖拽的过程中发生，`end`在拖拽之后发生。\r\n\r\n在JavaScript中，`call()`作用是为了改变某个函数运行时的上下文（`context`）而存在的，换句话说，就是改变了函数体内部this的指向，即`a.call(d3.drag())`  等价于 `d3.drag(a)`。\r\n我们使用`call()`方法使得节点支持拖拽事件，节点的选择集可以调用`call(d3.drag())`，如此可让节点支持鼠标拖曳。\r\n\r\n如果想要某个节点固定在一个位置，可以指定以下两个额外的属性:\r\n\r\nfx - 节点的固定 x-位置\r\nfy - 节点的固定 y-位置\r\n\r\n`drag`中有三个函数，在这里进行了实现，其中`d.fx`和`d.fy`表示固定坐标，例如，现在我们看到`dragged`函数，我们可以发现这样的代码：`d.fx = d3.event.x;  d.fy = d3.event.y;`，也就是在拖动节点的时候，鼠标位置在哪里（`d3.event`），节点的固定位置就在哪里，再看到`ended`函数，也就是结束拖动的时候触发，可以发现，固定坐标都为空，也就是不固定，这样模拟的效果才好（你们也可以试试去掉`ended`函数会发生什么，这样可以更好的理解）\r\n\r\n```\r\nfunction started(d){\r\n\tif(!d3.event.active){\r\n    //设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\r\n    // 当前alpha值为0，需设置alphaTarget让节点动起来\r\n\t\tsimulation.alphaTarget(0.8).restart();\r\n\t}\r\n\td.fx = d.x;\r\n\td.fy = d.y;\r\n}\r\nfunction dragged(d){\r\n   //移动时候该结点的位置，跟随鼠标位置，并且是fix位置，表示可以盖过其他节点\r\n\t d.fx = d3.event.x;\r\n\t d.fy = d3.event.y;\r\n}\r\nfunction ended(d){\r\n\tif(!d3.event.active){\r\n\t\t// 让alpha目标值值恢复为默认值0\r\n\t\tsimulation.alphaTarget(0);\r\n\t}\r\n\td.fx = null;\r\n\td.fy = null;\r\n}\r\n```\r\n\r\n为了使拖拽更加自然，我们引入`alpha`。 `alpha`是介于0和1之间的数字，用于定义模拟进度的程度。当模拟开始时，`alpha`设置为1，并且该值根据`alphaDecay`速率缓慢衰减，直到达到模拟的`alphaTarget`。`alphaTarget`重新定义了`alpha`最终结束的位置（渐近线），因此不是缓慢地变为0，它会慢慢地变为0.8。默认情况下，`alphaTarget`设置为0.1。`alphaMin`设置了模拟将停止运行的最小 `alpha` 值，`alpha`小于等于`alphaMin`才会导致停止tick,如果没有指定 `min` 则返回当前的最小 `alpha` 值，默认为 `0.001`。\r\n\r\n----\r\n##### 任务：\r\n设定`strarted`、`dragged`和`ended`方法，通过call方法给节点设定`d3.drag()`，并在`call`方法中将`d3.drag()`中的`start`、`drag`和`end`和设定的方法一一对应。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>call()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.call/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.drag()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.drag/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该定义和使用<code>started</code>方法\",\r\n    \"teststring\":  \"code.match(/started/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该定义和使用<code>dragged</code>方法\",\r\n    \"teststring\":  \"code.match(/dragged/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该定义和使用<code>ended</code>方法\",\r\n    \"teststring\":  \"code.match(/ended/)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).distance((d)=>d.value*100))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        //绘制连线\r\n        const link = svg.append(\"g\")\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .enter()\r\n            .append(\"line\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 1);\r\n        //绘制节点\t\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10);\r\n            // 在下面添加你的代码\r\n            \r\n            \r\n            \r\n            \r\n            // 在上面添加你的代码\r\n        //添加tick监听\r\n        simulation.on(\"tick\", () => {\r\n            link\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n            node\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n            });\r\n        // 在下面添加你的代码\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        // 在上面添加你的代码\r\n    </script>\r\n</body>",
  "concept": [
    "drag()"
  ]
},{
  "_id": {
    "$oid": "5effecb06321bbe296777f8f"
  },
  "course_id": 45,
  "title": "绘制弦图的圆环",
  "text": "##### 描述:  \r\n有了转换后的数据，可以开始绘图了。我们先来用弦图的节点组绘制外部的圆环:\r\n```\r\nconst arc = d3.arc()\r\n              .innerRadius(innerRadius)\r\n\t\t      .outerRadius(outerRadius)\t\t\t\t\t\t\t\t\t\r\n```  \r\n接下来让我们先添加弦图外部的四个圆环\r\n\r\n\r\n----\r\n##### 任务:\r\n在变量group 下使用 D3 绑定节点数组添加 N 个`<path>`标签，设置`<path>`的路径字符串 `d` 为使用 `chords.group`作为参数传入弧生成器 `arc` 得到的返回值。",
  "goal": "[     \r\n   { \r\n    \"text\": \"您的结果中应该有4个<code><path></code>标签\",\r\n    \"teststring\": \"$('path').length == 4\"\r\n   },\r\n   { \r\n    \"text\": \"您应该使用<code>data</code>方法绑定节点数组\",\r\n    \"teststring\": \"code.match(/.data\\\\(\\\\s*chords\\\\.groups\\\\s*\\\\)/g)\"\r\n   },\r\n    { \r\n    \"text\": \"您应该使用<code>attr</code>方法设置路径字符串\",\r\n    \"teststring\": \"code.match(/.attr\\\\(\\\\s*\\\"d\\\"\\\\s*,\\\\s*(arc)|(.\\\\s*=>arc\\\\(\\\\s*.\\\\s*\\\\))\\\\s*\\\\)/g)\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 950\r\n    const height = 650\r\n    const outerRadius = height/2 - 30\r\n    const innerRadius = outerRadius - 20\r\n   \r\n    const data = [\r\n      [130,  90, 30, 20],\r\n      [ 70,300 ,50 , 50],\r\n      [ 35, 75, 160, 12],\r\n      [ 20,  60,  30, 100]\r\n    ]\r\n    const chord = d3.chord()\r\n                    .padAngle(0.05)\r\n                    .sortSubgroups(d3.descending)\r\n    \r\n    \r\n    const chords = chord(data)\r\n    \r\n    const arc = d3.arc()\r\n                  .innerRadius(innerRadius)\r\n                  .outerRadius(outerRadius)\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"viewBox\",[-width/2,-height/2,width,height])               \r\n    \r\n    const group = svg.append(\"g\")\r\n   //在下面添加您的代码 \r\n    \r\n  </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f004b106321bbe296777f90"
  },
  "course_id": 46,
  "title": "使用D3的rgb方法调整颜色的明暗",
  "text": "##### 描述：  \r\n为了分清楚哪个环对应哪个节点接下来我们为节点分配颜色  \r\n先定义颜色比例尺：  \r\n```\r\nconst color = d3.scaleOrdinal()\r\n          .domain([0,1,2,3])\r\n          .range(d3.schemeCategory10)//d3.schemeCategory10是D3预定义的十种颜色这里自动使用前面4种\r\n```\r\n然后使用我们填充path时就可以使用节点的行号index来对应颜色。  \r\n```\r\n.attr(\"fill\", color(d.index))\r\n```\r\n然后我们用比填充的颜色更深一点的颜色来绘制圆环的边框。那么如何根据给定的颜色快速得到比它更深或者更浅的颜色呢？d3的`rgb()`方法可以将给定的颜色字符串转换为一个对象，这个对象提供了方法来调整颜色的明暗以及格式转换。  \r\n颜色字符串需要符合 [CSS Color Module Level 3](https://www.w3.org/TR/css-color-3/#colorunits) 标准例如下面的格式：\r\n* rgb(255, 255, 255)\r\n* rgb(10%, 20%, 30%)\r\n* rgba(255, 255, 255, 0.4)\r\n* rgba(10%, 20%, 30%, 0.4)\r\n* hsl(120, 50%, 20%)\r\n* hsla(120, 50%, 20%, 0.4)\r\n* #ffeeaa\r\n* #fea\r\n* #ffeeaa22\r\n* #fea2\r\n* steelblue  \r\n\r\n然后我们可以使用color.darker(k),color.brighter(k)来调整颜色的明暗，参数k是数字表示明暗的程度默认为1。\r\n```\r\nvar color1 = d3.rgb(\"red\")\r\nconsole.log(color1)//r:255, g:0 , b:0\r\nconsole.log(color1.darker(2))//r:124, g:0 , b:0\r\n```\r\n\r\n-----\r\n##### 任务：\r\n给`path`添加属性`stroke`设置`path`的线条颜色为更深一度,你需要先用`rgb`方法把当前节点的颜色转化为d3的颜色对象再使用`darker()`方法。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"环的边框颜色应该比填充色更深一度\",\r\n    \"teststring\": \"code.match(/.attr\\\\(\\\\s*\\\"stroke\\\"\\\\s*,\\\\s*.\\\\s*=>\\\\s*d3.rgb\\\\(\\\\s*color\\\\(.\\\\.index\\\\s*\\\\)\\\\s*\\\\)\\\\.darker\\\\(\\\\s*1?\\\\s*\\\\)\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "",
  "code": "<body>\r\n  <script>\r\n    const width = 950\r\n    const height = 650\r\n    const outerRadius = height/2 - 30\r\n    const innerRadius = outerRadius - 20\r\n   \r\n    const data = [\r\n      [130,  90, 30, 20],\r\n      [ 70,300 ,50 , 50],\r\n      [ 35, 75, 160, 12],\r\n      [ 20,  60,  30, 100]\r\n    ]\r\n    const chord = d3.chord()\r\n                    .padAngle(0.05)\r\n                    .sortSubgroups(d3.descending)\r\n    \r\n    \r\n    const chords = chord(data)\r\n    \r\n    const arc = d3.arc()\r\n                  .innerRadius(innerRadius)\r\n                  .outerRadius(outerRadius)\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"viewBox\",[-width/2,-height/2,width,height])               \r\n    \r\n    const color = d3.scaleOrdinal()\r\n          .domain([0,1,2,3])\r\n          .range(d3.schemeCategory10)\r\n          \r\n    const group = svg.append(\"g\")\r\n    \r\n    group.selectAll(\"path\")\r\n    .data(chords.groups)\r\n    .join(\"path\")\r\n    .attr(\"fill\",d=>color(d.index))\r\n    .attr(\"d\", arc)\r\n\r\n    \r\n  </script>\r\n</body>\r\n",
  "concept": [
    "d3-color",
    "darker()",
    "rgb()"
  ]
},{
  "_id": {
    "$oid": "5f0164ff6321bbe296777f91"
  },
  "course_id": 47,
  "title": "使用ribbon绘制弦",
  "text": "##### 描述：\r\nribbon翻译过来是丝带的意思，弦看起来和丝带是相似的。ribbon函数是一个弦生成器，用来生成绘制弦所需要的路径字符串。如图所示，弦生成器根据两段弧来绘制弦。\r\n![](/data/chord_ribbon.svg)\r\n只要确定了两条弧（source 和 target）的位置和弧所属的圆的半径我们就可以确定弦的位置了。弦生成器常用的属性访问器有 5 个分别为: \r\n* source() - 设置起始弧访问方式\r\n* target() - 设置结束弧访问方式\r\n* radius() - 设置起始/结束弧所属圆的半径访问方式\r\n* startAngle() - 设置起始/结束弧的起始角度访问方式\r\n* endAngle() - 设置起始/结束弧的结束角度访问方式\r\n\r\n当然你也可以什么都不用设置，直接使用默认的值就好，这样你需要确保传入的数据包含这 5 个参数如：\r\n```\r\nvar ribbon = d3.ribbon();\r\n\r\nribbon({\r\n  source: {startAngle: 0.7524114, endAngle: 1.1212972, radius: 240},\r\n  target: {startAngle: 1.8617078, endAngle: 1.9842927, radius: 240}\r\n}); // \"M164.0162810494058,-175.21032946354026A240,240,0,0,1,216.1595644740915,-104.28347273835429Q0,0,229.9158815306728,68.8381247563705A240,240,0,0,1,219.77316791012538,96.43523560788266Q0,0,164.0162810494058,-175.21032946354026Z\"\r\n```\r\n看到这样的返回值应该马上想到`<path>`。你也可以自定义使访问的变量具有别的名称，或是使用常量。例如：\r\n```\r\nvar ribbon = d3.ribbon()\r\n            .source( d=>d.startArc )\r\n\t\t\t\t\t\t.target( d=>d.endArc )\r\n\t\t\t\t\t\t.radius( 300 )\r\n\t\t\t\t\t\t.startAngle( d=>d.startAG )\r\n\t\t\t\t\t\t.endAngle( d=>d.endAG )\r\n\r\nribbon({\r\n  startArc: {startAG: 0.7524114, endAG: 1.1212972},\r\n  endArc: {startAngle: 1.8617078, endAngle: 1.9842927}\r\n}); //\"M205.02035131175725,-219.01291182942535A300,300,0,0,1,270.19945559261436,-130.35434092294287Q0,0,287.39485191334103,86.04765594546312A300,300,0,0,1,274.7164598876567,120.54404450985332Q0,0,205.02035131175725,-219.01291182942535Z\"\r\n```\r\n由于我们的数据 `chords` 中已经包含了角度的信息所以我们只需要给弦生成器设定半径就好了。\r\n\r\n-----\r\n##### 任务：\r\n新建弦生成器并赋值给常量 `ribbon` ，弦生成器需要设置半径为 `innerRadius`。 然后将弦数组传入弦生成器来生成路径字符串。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"你的结果应该有10根弦\",\r\n    \"teststring\": \"$('path').length == 14\"\r\n   },\r\n   { \r\n    \"text\": \"你应该使用<code>ribbon</code>方法创建弦生成器\",\r\n    \"teststring\": \"code.match(/d3.ribbon\\\\(\\\\s*\\\\)\\\\s*?\\\\n?\\\\s*?\\\\.radius\\\\(\\\\s*innerRadius\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"你应该使用弦生成器生成的结果来绘制图形\",\r\n    \"teststring\": \"code.match(/\\\\.attr\\\\(\\\\s*\\\"d\\\"\\\\s*,\\\\s*(ribbon|\\\\s*.\\\\s*=>\\\\s*ribbon\\\\(\\\\s*.\\\\s*\\\\))\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 950\r\n    const height = 650\r\n    const outerRadius = height/2 - 30\r\n    const innerRadius = outerRadius - 20\r\n   \r\n    const data = [\r\n      [130,  90, 30, 20],\r\n      [ 70,300 ,50 , 50],\r\n      [ 35, 75, 160, 12],\r\n      [ 20,  60,  30, 100]\r\n    ]\r\n    const chord = d3.chord()\r\n                    .padAngle(0.05)\r\n                    .sortSubgroups(d3.descending)\r\n    \r\n    \r\n    const chords = chord(data)\r\n    \r\n    const arc = d3.arc()\r\n                  .innerRadius(innerRadius)\r\n                  .outerRadius(outerRadius)\r\n    const svg = d3.select(\"body\")\r\n                  .append(\"svg\")\r\n                  .attr(\"viewBox\",[-width/2,-height/2,width,height])               \r\n    \r\n    const color = d3.scaleOrdinal()\r\n          .domain([0,1,2,3])\r\n          .range(d3.schemeCategory10)\r\n          \r\n    const group = svg.append(\"g\")\r\n    \r\n    group.selectAll(\"path\")\r\n    .data(chords.groups)\r\n    .join(\"path\")\r\n    .attr(\"fill\",d=>color(d.index))\r\n    .attr(\"d\", arc)\r\n    .attr(\"stroke\",d=>d3.rgb(color(d.index)).darker())\r\n    \r\n    const ribbon = d3.ribbon().radius(innerRadius)\r\n    \r\n    svg.append(\"g\")\r\n       .attr(\"fill-opacity\",0.67) //填充透明度\r\n       .selectAll(\"path\")\r\n       .data(chords)\r\n       .join(\"path\")\r\n       .attr(\"d\",ribbon)\r\n       .attr(\"fill\",d=>color(d.target.index))\r\n       .attr(\"stroke\",d=>d3.rgb(color(d.target.index)).darker())\r\n    \r\n    \r\n  </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f080ff40bc4b87ac34bc7b9"
  },
  "course_id": 55,
  "title": "使用D3生成树形层次结构的数据",
  "text": "##### 描述：\r\n许多数据集本质上是分层的。比如人口结构，国家和州的结构，企业和政府的组织结构，文件系统和软件包等等。甚至非层级的数据也可以被组合成层级数据结构，比如k-means聚类和生态系统数。\r\n\r\n如果你的数据已经是层次结构，比如`JSON`。你可以直接将其传递给`d3.hierarchy`.其根据指定的层次结构数据构造一个根节点。指定的数据 data 必须为一个表示根节点的对象。比如:\r\n```\r\n{\r\n    \"name\": \"gen\",\r\n    \"children\": [{\r\n            \"name\": \"num1\",\r\n            \"children\": [{\r\n                \"name\": \"num1-1\",\r\n                \"size\": \"4\"\r\n            }, {\r\n                \"name\": \"num1-2\",\r\n                \"size\": \"6\"\r\n            }]\r\n        },\r\n        {\r\n            \"name\": \"num2\",\r\n            \"size\": 5\r\n        },\r\n        {\r\n            \"name\": \"num3\",\r\n            \"size\": 15\r\n        },\r\n        {\r\n            \"name\": \"num4\",\r\n            \"size\": 12\r\n        },\r\n        {\r\n            \"name\": \"num5\",\r\n            \"size\": 8\r\n        }\r\n    ]\r\n}\r\n```\r\n指定的 children 访问器会为每个数据进行调用，从根 data 开始，并且必须返回一个数组用以表示当前数据的子节点，返回`null`表示当前数据没有子节点。如果没有指定 children 则默认为:\r\n```\r\nfunction children(d) {\r\n  return d.children;\r\n}\r\n```\r\n返回的节点和每一个后代会被附加如下属性:\r\n* node.data - 关联的数据，由`constructor`指定.\r\n* node.depth - 当前节点的深度, 根节点为`0`.\r\n* node.height - 当前节点的高度, 叶节点为 `0`.\r\n* node.parent - 当前节点的父节点, 根节点为 `null`.\r\n* node.children - 当前节点的孩子节点(如果有的话); 叶节点为 `undefined`.\r\n* node.value - 当前节点以及`descendants`(后代节点) 的总计值; 可以通过 `node.sum` 和 `node.count`计算.\r\n\r\n这个方法也可以用来测试一个节点是否是` instanceof d3.hierarchy `并且可以用来扩展节点原型链。\r\n\r\n下面是一个将上述数据转为层次结构，并将所有子节点的`size`值累加作为当前节点的`value`值，并且将有相同父节点的节点按`value`值从大到小排序的例子：\r\n```\r\nvar hierarchy_data = d3.hierarchy(data)\r\n       .sum(d => d.size)\r\n       .sort((a, b) => b.value - a.value);\r\n```\r\n\r\n在控制台中输出`hierarchy_data`如下图可以看到每个节点都有`height`,`depth`,`value`值，而且`value`值已经按从大到小的顺序排列好了。还可以查看children和parent对象。\r\n![](../data/hierarchy_data.png)\r\n-----\r\n##### 任务：\r\n使用`d3.hierarchy()`方法将读入的data转为层次结构，并将根节点保存在变量`hierarchy_data`中。之后使用`sum()`方法累加子节点的`value`值到当前节点上，并使用`sort()`方法按从小到大的顺序排列有相同父节点的节点。（求和和排序是后面构造矩形树图必须的步骤）\r\n\r\n##### 提示：\r\n`flare-2.json`中的数据如下：\r\n```\r\n{\r\n \"name\": \"flare\",\r\n \"children\": [\r\n  {\r\n   \"name\": \"analytics\",\r\n   \"children\": [\r\n    {\r\n     \"name\": \"cluster\",\r\n     \"children\": [\r\n      {\"name\": \"AgglomerativeCluster\", \"value\": 3938},\r\n      {\"name\": \"CommunityStructure\", \"value\": 3812},\r\n      {\"name\": \"HierarchicalCluster\", \"value\": 6714},\r\n      {\"name\": \"MergeEdge\", \"value\": 743}\r\n     ]\r\n    }\r\n...\r\n}\r\n```\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>hierarchy()</code>方法将数据<code>data</code>转为层次结构\",\r\n    \"teststring\":  \"code.match(/d3\\\\.hierarchy\\\\(\\\\s*data\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>sum()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.sum/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>sort()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.sort/g)\"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第1个儿子的值应为4116\",\r\n    \"teststring\":  \"$('p').eq(0).text() == 'hierarchy_data第 1 个儿子的值为: 4116' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第2个儿子的值应为24254\",\r\n    \"teststring\":  \"$('p').eq(1).text() == 'hierarchy_data第 2 个儿子的值为: 24254' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第3个儿子的值应为29934\",\r\n    \"teststring\":  \"$('p').eq(2).text() == 'hierarchy_data第 3 个儿子的值为: 29934' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第4个儿子的值应为30284\",\r\n    \"teststring\":  \"$('p').eq(3).text() == 'hierarchy_data第 4 个儿子的值为: 30284' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第5个儿子的值应为31294\",\r\n    \"teststring\":  \"$('p').eq(4).text() == 'hierarchy_data第 5 个儿子的值为: 31294' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第6个儿子的值应为48716\",\r\n    \"teststring\":  \"$('p').eq(5).text() == 'hierarchy_data第 6 个儿子的值为: 48716' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第7个儿子的值应为89721\",\r\n    \"teststring\":  \"$('p').eq(6).text() == 'hierarchy_data第 7 个儿子的值为: 89721' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第8个儿子的值应为100024\",\r\n    \"teststring\":  \"$('p').eq(7).text() == 'hierarchy_data第 8 个儿子的值为: 100024' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第9个儿子的值应为16515\",\r\n    \"teststring\":  \"$('p').eq(8).text() == 'hierarchy_data第 9 个儿子的值为: 165157' \"\r\n   },\r\n   { \r\n    \"text\": \"根节点<code>hierarchy_data</code>第10个儿子的值应为432629\",\r\n    \"teststring\":  \"$('p').eq(9).text() == 'hierarchy_data第 10 个儿子的值为: 432629' \"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    d3.json(\"/data/flare-2.json\").then(function(data){\r\n        \r\n        // 在下面添加你的代码\r\n        \r\n        var hierarchy_data = \r\n        \r\n        \r\n        \r\n        \r\n        // 在上面添加你的代码\r\n        \r\n       d3.select(\"body\").selectAll(\"p\").data(hierarchy_data.children)\r\n        .text((d,i) => \"hierarchy_data第 \"+(i+1)+\" 个儿子的值为: \"+d.value)\r\n        .enter().append(\"p\")\r\n        .text((d,i) => \"hierarchy_data第 \"+(i+1)+\" 个儿子的值为: \"+d.value)\r\n        .exit().remove();\r\n    });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "hierarchy()"
  ]
},{
  "_id": {
    "$oid": "5f0f1fe712b5e905b0c05b47"
  },
  "course_id": 49,
  "title": "设定力导向图节点的参数",
  "text": "##### 描述：\r\n我们可以使用常见的SVG组件——`g`元素来设定力导向图中的节点，`g`是英文中组（group）的缩写。SVG` <g>`元素用于将SVG形状分组在一起。分组后，您可以像变形单个形状一样变换整个形状。与 不能单独成为转换目标的嵌套 `<svg>`元素相比，这是一个优势。您还可以设置分组元素的样式，并像对待单个元素一样重复使用它们。\r\n\r\n元素`g`是用来组合对象的容器。添加到`g`元素上的变换会应用到其所有的子元素上。添加到`g`元素的属性会被其所有的子元素继承。\r\n\r\n`cx`和`cy`属性定义圆点的`x`和`y`坐标。如果省略`cx`和`cy`，圆的中心会被设置为(0, 0)。当前我们还没有让节点随着模拟进行变化，所以它会使用默认的参数而集中在左上角。\r\n\r\n----\r\n##### 任务：\r\n使用append方法给svg添加一个`g`元素，并通过给出的点数据来设定力导向图的`circle`点，再将点的半径`r`设置为10。你应该使用`selectAll()`、`data()`、`enter()`、`append()`、`attr()`方法。\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>selectAll()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.selectAll/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>data()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.data/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>enter()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.enter/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.attr/)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>circle</code>元素的<code>r</code>值应为10\",\r\n    \"teststring\": \"$('circle').eq(0).attr('r') == '10'\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n       \r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        // 在下面添加你的代码\r\n        \r\n        const node = undefined\r\n        \r\n        \r\n\r\n\r\n        // 在上面添加你的代码\r\n\r\n    </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f0f1ff912b5e905b0c05b48"
  },
  "course_id": 50,
  "title": "设定力导向图连线的参数",
  "text": "##### 描述：\r\n和上节一样，使用类似的方法来设定力导向图的连线。\r\n\r\n和点不一样的一点是，为了设定力导向图的连线，我们还需要更改生成牵引力的默认方法，添加连线的`distance`属性。\r\n\r\n```\r\nconst simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).distance((d)=>d.value))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n```\r\n\r\n----\r\n##### 任务：\r\n使用`append`方法给`svg`添加一个`g`元素，并通过给出的连线数据设定绘制力导向图的`line`连线，再通过`stoke`将连线的颜色设置为`black`，通过`stroke-width`将连线的粗细设置为1。你应该使用`selectAll()`、`data()`、`enter()`、`append()`、`attr()`方法。\r\n\r\n还需要更改生成牵引力的默认方法，将`distance`属性设置为`value`值的100倍。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>selectAll()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.selectAll/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>data()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.data/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>enter()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.enter/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.append/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.attr/)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>元素的<code>stroke</code>值应为black\",\r\n    \"teststring\": \"$('line').eq(0).attr('stroke') == 'black'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>元素的<code>stroke-width</code>值应为1\",\r\n    \"teststring\": \"$('line').eq(0).attr('stroke-width') == '1'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500);\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //连线数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            // 在下面添加你的代码\r\n            \r\n            // 在上面添加你的代码;\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        // 在下面添加你的代码\r\n\r\n        const link = undefined\r\n        \r\n\r\n\r\n        // 在上面添加你的代码\r\n        //绘制点\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10);\r\n    </script>\r\n</body>",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f119011e69daf8d2215b607"
  },
  "course_id": 56,
  "title": "使用D3创建一个矩阵树图布局",
  "text": "##### 描述：\r\n矩形树图(Treemap)是将层次结构数据显示为一组嵌套的矩形。 每个组由一个矩形表示，矩形的大小和颜色,都是数据的反映。在许多网站我们都能见到类似下图的图。将照片以不同大小的矩形排列的情形,这正是矩阵树图的应用。\r\n![](../data/treemap.png)\r\n\r\n使用方法`d3.treemap()`即可创建一个treemap的布局，`treemap.size([size])`方法可以设定布局的尺寸,参数size是只有两个元素的数组,分别表示宽和高。\r\n\r\n下面是一个创建treemap布局的例子：\r\n```\r\nvar treemap = d3.treemap()\r\n\t\t\t\t.size([100,100])\r\n```\r\n在控制台中输出新的`treemap`变量，可以发现这是一个函数，具体的用法我们下一节再说。\r\n\r\n----\r\n##### 任务：\r\n使用方法`d3.treemap()`创建一个treemap布局，并将所得到的布局保存在treemap变量中，之后使用`size()`方法设定`treemap`布局的宽和高都为`954`。\r\n",
  "goal": "[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.treemap()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\s*\\\\.\\\\s*treemap\\\\s*\\\\(\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>size()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.size/g)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>treemap</code>布局的宽应为954\" ,\r\n    \"teststring\":  \"$('p').eq(0).text()=='当前treemap布局的宽为：954'\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"<code>treemap</code>布局的高应为954\" ,\r\n    \"teststring\":  \"$('p').eq(1).text()=='当前treemap布局的高为：954'\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n\r\n    d3.json(\"/data/flare-2.json\").then(function(data){\r\n        \r\n        var hierarchy_data = d3.hierarchy(data)\r\n            .sum(d => d.value)\r\n            .sort((a, b) => a.value - b.value)\r\n            \r\n    // 在下面添加你的代码\r\n    \r\n    var treemap =  \r\n    \r\n    // 在上面添加你的代码;\r\n    \r\n    d3.select(\"body\").append(\"p\").text(\"当前treemap布局的宽为：\"+treemap.size()[0]);\r\n    d3.select(\"body\").append(\"p\").text(\"当前treemap布局的高为：\"+treemap.size()[1]);\r\n    \r\n    console.log(treemap);\r\n    });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "treemap()"
  ]
},{
  "_id": {
    "$oid": "5f119602e69daf8d2215b608"
  },
  "course_id": 57,
  "title": "使用D3构造treemap数据结构",
  "text": "##### 描述：\r\n上一节中将布局保存在变量`treemap`中后，`treemap`就成为了一个可以构造treemap数据结构的函数了。\r\n\r\n下面是一个使用`treemap`函数的例子：\r\n```\r\nvar root = treemap(data);\r\n```\r\n其中data为分层后的数据，函数的返回值为根节点。\r\n\r\n在控制台中输出`root`，如下图可以看到每个节点都多了x0,y0,x1,y1这四个参数。分别为每个节点对应的矩形的左上角和右下角点的位置坐标。\r\n![](../data/x0y0.png)\r\n----\r\n##### 任务：\r\n利用之前得到的`treemap`函数和分层后的数据`hierarchy_data`构造treemap数据结构，并将根节点保存在root变量中。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>treemap()</code>函数构造数据<code>hierarchy_data</code>的矩形树图根节点\",\r\n    \"teststring\": \"code.match(/(var|let|const)\\\\s*root\\\\s*=\\\\s*treemap\\\\(\\\\s*hierarchy_data\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n                \r\n     d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n    \r\n                 \r\n            // 在下面添加你的代码\r\n            \r\n            var root = \r\n            \r\n            // 在上面添加你的代码;\r\n            \r\n            console.log(root);  \r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f11a67fe69daf8d2215b60a"
  },
  "course_id": 58,
  "title": "使用D3为所有叶子节点在SVG中绑定`<g>`元素",
  "text": "##### 描述：\r\n在矩形树图中我们只需要画出每个叶子节点的矩形即可，所以需要为每个叶子节点在SVG中绑定`<g>`元素方便之后的画图操作。通过`root.leaves()`可以得到所有的叶子节点。然后通过前面所学的知识可以很容易绑定上。每个`<g>`元素的坐标就是之前得到的`x0`和`y0`。\r\n下面是一个利用`attr()`方法设置`<g>`元素位置的例子：\r\n```\r\nattr(\"transform\", d => `translate(${d.x},${d.y})`);\r\n/*等价于\r\nattr(\"transform\",function(d){\r\n       return \"translate(\"+d.x+\",\"+d.y+\")\";\r\n}\r\n*/\r\n```\r\n\r\n其中` ${d.x}`是将`d.x`的值转为字符串\r\n\r\n----\r\n##### 任务：\r\n使用`selectAll()`方法选择SVG上的所有`<g>`元素并将结果保存在变量`leaf`中，使用`data()`方法绑定所有的叶子节点，使用`join()`方法增加`<g>`元素，使用`attr()`方法改变`transform`属性，使得每个叶子节点对应的`<g>`元素的`x`和`y`的值为该叶子节点对应的矩形的左上角顶点坐标`(x0,y0)`的值。",
  "goal": "[    \r\n    {\r\n        \"text\": \"您的代码应该使用<code>svg.selectAll()</code>方法选择所有的<code>g</code>元素\",   \r\n        \"teststring\":  \"code.match(/svg\\\\s*\\\\.\\\\s*selectAll\\\\s*\\\\(\\\\s*\\\"g\\\"\\\\s*\\\\)/g)\"   \r\n        \r\n    }, \r\n    {\r\n        \"text\": \"您的代码应该使用<code>data()</code>方法绑定所有的叶子节点\",   \r\n        \"teststring\":  \"code.match(/\\\\.\\\\s*data\\\\s*\\\\(\\\\s*root\\\\s*\\\\.\\\\s*leaves\\\\s*\\\\(\\\\s*\\\\)\\\\s*\\\\)/g)\"   \r\n        \r\n    }, \r\n    {\r\n        \"text\": \"您的代码应该使用<code>join()</code>方法增加<code>g</code>元素\",   \r\n        \"teststring\":  \"code.match(/\\\\.\\\\s*join\\\\s*\\\\(\\\\s*\\\"g\\\"\\\\s*\\\\)/g)\"   }, \r\n    {\r\n        \"text\": \"您的代码应该使用<code>attr()</code>方法\",  \r\n        \"teststring\":  \"code.match(/\\\\.attr/g)\"   },  \r\n    {\r\n        \"text\": \"您的代码应该有220个<code>g</code>元素。\",    \r\n        \"teststring\": \"$('g').length == 220\"   },  \r\n    {\r\n        \"text\": \"所有<code>g</code>元素的<code>x</code>和<code>y</code>的值为对应矩形左上角顶点坐标的值\",   \r\n        \"teststring\": \"code.match(/(\\\\.attr\\\\(\\\\s*\\\"transform\\\"\\\\s*,\\\\s*(\\\\w+)\\\\s*=>\\\\s*`\\\\s*translate\\\\(\\\\s*\\\\$\\\\{\\\\s*\\\\2\\\\.x0\\\\s*\\\\}\\\\s*,\\\\s*\\\\$\\\\{\\\\s*\\\\2\\\\.y0\\\\s*\\\\}\\\\s*\\\\)\\\\s*`\\\\s*\\\\))|(\\\\.attr\\\\s*\\\\(\\\\s*\\\"\\\\s*transform\\\\s*\\\"\\\\s*,\\\\s*function\\\\s*\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\\\\s*return\\\\s*\\\"\\\\s*translate\\\\s*\\\\(\\\\s*\\\"\\\\s*\\\\+\\\\s*\\\\4\\\\.x0\\\\s*\\\\+\\\\s*\\\"\\\\s*,\\\\s*\\\"\\\\s*\\\\+\\\\s*\\\\4\\\\.y0\\\\s*\\\\+\\\\s*\\\"\\\\s*\\\\)\\\\s*\\\"\\\\s*;\\\\s*\\\\}\\\\s*\\\\))/g)\"\r\n    }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n                \r\n     d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n     \r\n            \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            // 在下面添加你的代码\r\n            \r\n            var leaf = \r\n            \r\n            // 在上面添加你的代码;\r\n            \r\n            console.log(root);  \r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "${}",
    "leaves()"
  ]
},{
  "_id": {
    "$oid": "5f12714dbcc7512a0b05140c"
  },
  "course_id": 59,
  "title": "将每个叶子节点对应的矩形画出",
  "text": "##### 描述：\r\n通过前面所学的知识我们已经大概了解到了每个叶子节点对应的矩形在空间中的位置，但不画出来感受还是没有那么深，这一节我们就尝试画出这些矩形。\r\n\r\n由于我们已经将叶子节点的数据绑定到了对应的`<g>`元素上了，所以只需要添加`rect`就可以画出所有的矩形了，然后修改`rect`的属性就可以显示出来。\r\n\r\n通过`append()`方法为所有叶子节点添加`rect`,然后通过`attr()`方法设置`width`和`height`属性来设置矩形的宽和高（已经知道了每个矩形的左上角和右下角顶点坐标了，通过简单的计算就能得出宽和高）。为了我们能够观察到矩形，我们还需要通过`attr()`方法设置`fill`属性的值来为矩形填充颜色。\r\n\r\n----\r\n##### 任务：\r\n为每个叶子节点画出矩形，颜色填充为`navy`。\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>leaf.append()</code>方法添加<code>rect</code>元素\",\r\n    \"teststring\":  \"code.match(/leaf\\\\s*\\\\.\\\\s*append\\\\s*\\\\(\\\\s*\\\"rect\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该有220个<code>rect</code>元素。\",\r\n    \"teststring\": \"$('rect').length == 220\"\r\n   },\r\n   { \r\n    \"text\": \"这些矩形都应该有海军蓝的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('rect').css('fill') == 'rgb(0, 0, 128)'\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.attr/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您需要为每个矩形设置相应的<code>width</code>\",\r\n    \"teststring\": \"code.match(/(\\\\.attr\\\\s*\\\\(\\\\s*\\\"width\\\"\\\\s*,\\\\s*(\\\\w+)\\\\s*=>\\\\s*\\\\2\\\\.x1\\\\s*-\\\\s*\\\\2\\\\.x0\\\\s*\\\\))|(\\\\.attr\\\\s*\\\\(\\\\s*\\\"\\\\s*width\\\\s*\\\"\\\\s*,\\\\s*function\\\\s*\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\\\\s*return\\\\s*\\\\4\\\\.x1\\\\s*-\\\\s*\\\\4\\\\.x0\\\\s*;?\\\\s*\\\\}\\\\s*\\\\))/g)\"\r\n    },\r\n   { \r\n    \"text\": \"您需要为每个矩形设置相应的<code>height</code>\",\r\n    \"teststring\": \"code.match(/(\\\\.attr\\\\s*\\\\(\\\\s*\\\"height\\\"\\\\s*,\\\\s*(\\\\w+)\\\\s*=>\\\\s*\\\\2\\\\.y1\\\\s*-\\\\s*\\\\2\\\\.y0\\\\s*\\\\))|(\\\\.attr\\\\s*\\\\(\\\\s*\\\"\\\\s*height\\\\s*\\\"\\\\s*,\\\\s*function\\\\s*\\\\(\\\\s*(\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\\\\s*return\\\\s*\\\\4\\\\.y1\\\\s*-\\\\s*\\\\4\\\\.y0\\\\s*;?\\\\s*\\\\}\\\\s*\\\\))/g)\"\r\n    }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n                \r\n     d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n \r\n            \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            var leaf = svg.selectAll(\"g\")\r\n                .data(root.leaves())\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n            \r\n            // 在下面添加你的代码\r\n\r\n            \r\n\r\n            // 在上面添加你的代码;\r\n            \r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f1273f1bcc7512a0b05140d"
  },
  "course_id": 60,
  "title": "为矩形画上不同的颜色",
  "text": "##### 描述：\r\n在上一节中所有的矩形颜色都是相同的而且每个矩形都挨在了一起，对我们分析不是很方便，所以我们希望根节点的所有直接子节点之间有着不同的颜色，直接子节点之内有着相同的颜色，且所有的矩形单元能隔开一定的距离。\r\n\r\n`treemap.padding([padding])`方法可以设定矩形单元之间的间隔,单位为像素。\r\n\r\n下面是两个设置单元之间间隔为5的例子：\r\n```\r\nvar treemap = d3.treemap()；\r\ntreemap.padding(5);\r\n```\r\n```\r\nvar treemap = d3.treemap()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.padding(5);\r\n```\r\n\r\n为了得到不同的颜色需要引入D3颜色比例尺`d3.schemeCategory10`，下面将介绍两种使用方法。\r\n\r\n```\r\nvar color =d3.schemeCategory10;\r\ncolor[i];\r\n```\r\n先定义颜色比例尺，然后可以将`color`当成数组来使用，总共有10种颜色，参数`i`的值为数字`0-9`。\r\n\r\n```\r\nvar color = d3.scaleOrdinal(d3.schemeCategory10);\r\ncolor(i);\r\n```\r\n这里首先也是定义颜色比例尺，通过`scaleOrdinal()`方法后可以将`color()`当成一个函数来使用，参数`i`可以为任何值（如：`1`,`dog`,`aaa`），并且会为不同的`i`的值返回不同的颜色，相同的`i`的值返回相同的颜色，总共也是有10种颜色。\r\n\r\n10种颜色如下图所示：\r\n![](../data/color.png)\r\n\r\n另外通过修改`fill-opacity`属性可以改变矩形颜色的透明度。\r\n\r\n##### 任务：\r\n\r\n使用`padding`方法使得每个矩形直接的间隔为`1px`,构造`color()`函数，之后使用`attr()`方法修改`fill`属性的值，通过调用回调函数使得根节点的所有直接子节点之间有着不同的颜色，直接子节点之内有着相同的颜色，设置`fill-opacity`属性的值为`0.6`。\r\n\r\n##### 提示：\r\n节点在哪一层可以通过`depth`的值判断，值为`1`的节点为根节点的直接子节点，通过根节点的直接子节点的`name`值来返回颜色（`d.data.name`可以获得`name`的值）。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您需要构造color函数\",\r\n    \"teststring\": \"code.match(/(var|let|const)\\\\s*color\\\\s*=\\\\s*d3\\\\.scaleOrdinal\\\\s*\\\\(\\\\s*d3\\\\s*\\\\.schemeCategory10\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>padding()</code>方法并设置间隔为1\",\r\n    \"teststring\":  \"code.match(/\\\\.padding\\\\(\\\\s*1\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法并设置透明度<code>fill-opacity</code>为<code>0.6</code>\",\r\n    \"teststring\":  \"$('rect').css('fill-opacity')==0.6\"\r\n   },\r\n   { \r\n    \"text\": \"第一大块矩形的颜色应为蓝色\",\r\n    \"teststring\":  \"$('rect').eq(0).css('fill')== 'rgb(31, 119, 180)'\"\r\n   },\r\n   { \r\n    \"text\": \"第二大块矩形的颜色应为橘色\",\r\n    \"teststring\":  \"$('rect').eq(1).css('fill')== 'rgb(255, 127, 14)'&&$('rect').eq(4).css('fill')== 'rgb(255, 127, 14)'\"\r\n   },\r\n   { \r\n    \"text\": \"第三大块矩形的颜色应为绿色\",\r\n    \"teststring\":  \"$('rect').eq(5).css('fill')== 'rgb(44, 160, 44)'&&$('rect').eq(12).css('fill')== 'rgb(44, 160, 44)'\"\r\n   },\r\n   { \r\n    \"text\": \"第四大块矩形的颜色应为红色\",\r\n    \"teststring\":  \"$('rect').eq(13).css('fill')== 'rgb(214, 39, 40)'&&$('rect').eq(23).css('fill')== 'rgb(214, 39, 40)'\"\r\n   },\r\n   { \r\n    \"text\": \"第五大块矩形的颜色应为紫色\",\r\n    \"teststring\":  \"$('rect').eq(24).css('fill')== 'rgb(148, 103, 189)'&&$('rect').eq(33).css('fill')== 'rgb(148, 103, 189)'\"\r\n   },\r\n   { \r\n    \"text\": \"第六大块矩形的颜色应为棕色\",\r\n    \"teststring\":  \"$('rect').eq(34).css('fill')== 'rgb(140, 86, 75)'&&$('rect').eq(43).css('fill')== 'rgb(140, 86, 75)'\"\r\n   },\r\n   { \r\n    \"text\": \"第七大块矩形的颜色应为粉色\",\r\n    \"teststring\":  \"$('rect').eq(44).css('fill')== 'rgb(227, 119, 194)'&&$('rect').eq(103).css('fill')== 'rgb(227, 119, 194)'\"\r\n   },\r\n   { \r\n    \"text\": \"第八大块矩形的颜色应为灰色\",\r\n    \"teststring\":  \"$('rect').eq(104).css('fill')== 'rgb(127, 127, 127)'&&$('rect').eq(123).css('fill')== 'rgb(127, 127, 127)'\"\r\n   },\r\n   { \r\n    \"text\": \"第九大块矩形的颜色应为黄色\",\r\n    \"teststring\":  \"$('rect').eq(124).css('fill')== 'rgb(188, 189, 34)'&&$('rect').eq(148).css('fill')== 'rgb(188, 189, 34)'\"\r\n   },\r\n   { \r\n    \"text\": \"第十大块矩形的颜色应为浅蓝色\",\r\n    \"teststring\":  \"$('rect').eq(149).css('fill')== 'rgb(23, 190, 207)'&&$('rect').eq(219).css('fill')== 'rgb(23, 190, 207)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n    \r\n    //在下面构造color()函数\r\n    \r\n    var color = \r\n    \r\n    //在上面构造color()函数\r\n        \r\n     d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n                 \r\n                // 在下面设置矩形之间的间隔\r\n                 \r\n                \r\n                 \r\n                // 在上面设置矩形之间的间隔\r\n                \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            var leaf = svg.selectAll(\"g\")\r\n                .data(root.leaves())\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n            \r\n            leaf.append(\"rect\")\r\n            \r\n                // 在下面修改颜色和透明度\r\n                \r\n                .attr(\"fill\",\"navy\")\r\n                \r\n                \r\n                // 在上面修改颜色和透明度;\r\n                \r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0);\r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "schemeCategory10"
  ]
},{
  "_id": {
    "$oid": "5f12c73fbcc7512a0b05140f"
  },
  "course_id": 61,
  "title": "在矩形上添加标签",
  "text": "##### 描述：\r\n矩形树图的框架已经基本建立了，为了能从图中得到更多信息，我们希望在矩形上能显示当前节点点的名字和值。\r\n\r\n对于名字我们希望首字母能够大写，对于数值我们希望每隔三个数有个`,`,这样可以方便阅读。\r\n\r\n名字的格式可以通过正则表达式来设置，数值的显示可以通过`format()`方法来设置一个格式。\r\n\r\n例如：\r\n```\r\nvar format = d3.format(\",d\");\r\n//这就设置好了format\r\nformat(x);//x为任意数字\r\n//输入任意数字就能返回我们需要的数字的格式\r\n//如format(1000000)返回1,000,000\r\n```\r\n通过`format()`函数就能得到一个我们需要的数字\r\n\r\n下面是个填信息的例子：\r\n```\r\nleaf.append(\"g\")\r\n                .selectAll(\"text\")\r\n                .data(d => d.data.name.split(/(?=[A-Z][a-z])|s+/g).concat(format(d.value)))\r\n\t\t\t\t\t\t\t\t//这里直接给出正则表达式，有兴趣的可以自己了解\r\n                .join(\"text\")\r\n                .attr(\"x\", x)\r\n                .attr(\"y\", y)\r\n                .text(d => d)\r\n```\r\n\r\n##### 任务：\r\n\r\n设置一个format格式，在每个矩形上添加`text`标签，并以需要的格式填入相应的名字和数值，`text`的`x`值为3，`y`为`(i + 1) * 10`,其中`i`表示第i行的信息。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.format()</code>方法设置数字的格式\",\r\n    \"teststring\":  \"code.match(/(var|let|const)\\\\s*format\\\\s*=\\\\s*d3\\\\s*\\\\.\\\\s*format\\\\s*\\\\(\\\\s*\\\",d\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法添加<code>g</code>元素\",\r\n    \"teststring\":  \"code.match(/leaf\\\\s*\\\\.\\\\s*append\\\\s*\\\\(\\\\s*\\\"g\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>selectAll()</code>方法选择所有的<code>text</code>元素\",\r\n    \"teststring\":  \"code.match(/\\\\.\\\\s*selectAll\\\\s*\\\\(\\\\s*\\\"text\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>join()</code>方法添加<code>text</code>元素\",\r\n    \"teststring\":  \"code.match(/\\\\.\\\\s*join\\\\s*\\\\(\\\\s*\\\"text\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该有589个<code>text</code>元素,每显示的一行信息对应一个<code>text</code>元素\",\r\n    \"teststring\":  \"$('text').length=='589'\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法设置属性<code>x</code>的值为3\",\r\n    \"teststring\":  \"$('text')[0].attributes.x.value==3\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法设置属性<code>y</code>的值为<code>(i + 1) * 10</code>\",\r\n    \"teststring\":  \"$('text')[0].attributes.y.value ==10 && $('text')[1].attributes.y.value ==20 && $('text')[2].attributes.y.value ==30\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>text()</code>方法写入信息\",\r\n    \"teststring\":  \"code.match(/((\\\\.\\\\s*text\\\\s*\\\\(\\\\s*(?<x1>\\\\w+)\\\\s*=>\\\\s*\\\\k<x1>\\\\s*\\\\))|(\\\\.\\\\s*text\\\\s*\\\\(\\\\s*function\\\\s*\\\\(\\\\s*(?<x2>\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\\\\s*return\\\\s*\\\\k<x2>\\\\s*;?\\\\s*\\\\}\\\\s*\\\\)))/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n    \r\n    //请在下面添加你的代码\r\n    \r\n    var format = \r\n    \r\n    //请在上面添加你的代码\r\n    \r\n    d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n                 .padding(1);\r\n            \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            var leaf = svg.selectAll(\"g\")\r\n                .data(root.leaves())\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n            \r\n            leaf.append(\"rect\")\r\n                .attr(\"fill\", d => {\r\n                    while (d.depth > 1) d = d.parent;\r\n                    return color(d.data.name);\r\n                })\r\n                .attr(\"fill-opacity\", 0.6)  \r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0);\r\n\r\n            //请在下面添加你的代码\r\n            \r\n            leaf\r\n            \r\n                .data(d => d.data.name.split(/(?=[A-Z][a-z])|s+/g).concat(format(d.value)))\r\n            \r\n            //请在上面添加你的代码\r\n\r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "format()"
  ]
},{
  "_id": {
    "$oid": "5f12e6c9bcc7512a0b051410"
  },
  "course_id": 63,
  "title": "给矩形添加标题提示",
  "text": "##### 描述：\r\n\r\n在上一节中我们将超过矩形显示范围的信息隐藏了，这部分信息在图上就丢失了，但我们分析图的时候是需要这些信息的，所有我们想当鼠标悬停在某一矩形上时能显示这些信息。除此之外我们还希望能够显示其祖先的名称，方便我们进一步的分析。\r\n\r\n\r\n我们可以通过为每个叶子节点添加`title`元素,然后通过`text()`方法使用回调函数改变显示的值来实现悬停的效果。\r\n\r\n为了得到我们需要显示的内容，可以先使用`ancestors()`方法可以得到某一节点所有的祖先，通过`map(d => d.data.name)`我们可以得到每个祖先的名字，由于得到的祖先顺序是从当前节点向上的，我们的习惯是从最早的祖先一直到当前节点，于是可以通过`reverse()`方法翻转后得到的我们需要的顺序。\r\n\r\n下面是一个增加`title`的例子:\r\n```\r\nleaf.append(\"title\")\r\n                .text(d => `${d.ancestors().reverse().map(d => d.data.name).join(\"/\")}`);\r\n```\r\n\r\n##### 任务：\r\n\r\n为每个叶子节点增加`title`元素，使得鼠标悬停时能显示更多需要的信息。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>leaf.append()</code>方法添加<code>title</code>元素\",\r\n    \"teststring\":  \"code.match(/leaf\\\\s*\\\\.\\\\s*append\\\\s*\\\\(\\\\s*\\\"title\\\"\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该有220个<code>title</code>元素。\",\r\n    \"teststring\": \"$('title').length == 220\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>text()</code>设置鼠标悬停时显示的内容\",\r\n    \"teststring\":  \"$('title')[0].innerHTML =='flare/flex/FlareVis\\\\n4,116' && $('title')[1].innerHTML=='flare/display/LineSprite\\\\n1,732' && $('title')[119].innerHTML=='flare/animate/interpolate/ArrayInterpolator\\\\n1,983' \"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n    const format = d3.format(\",d\");\r\n    d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n                 .padding(1);\r\n            \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            var leaf = svg.selectAll(\"g\")\r\n                .data(root.leaves())\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n            \r\n            leaf.append(\"rect\")\r\n                .attr(\"fill\", d => {\r\n                    while (d.depth > 1) d = d.parent;\r\n                    return color(d.data.name);\r\n                })\r\n                .attr(\"fill-opacity\", 0.6)  \r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0);\r\n            \r\n            leaf.append(\"clipPath\")\r\n                .attr(\"id\", d => (d.clipUid = d.data.name + \"_clip\")) \r\n                .append(\"rect\")\r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0)\r\n\r\n            leaf.append(\"g\")\r\n                .attr(\"clip-path\", d => `url(#${d.clipUid})`) \r\n                .selectAll(\"text\")\r\n                .data(d => d.data.name.split(/(?=[A-Z][a-z])|s+/g).concat(format(d.value)))\r\n                .join(\"text\")\r\n                .attr(\"x\", 3)\r\n                .attr(\"y\", (d, i) => (i + 1) * 10)\r\n                .text(d => d)\r\n                \r\n            //请在下面添加你的代码\r\n            \r\n            \r\n            \r\n            //请在上面添加你的代码\r\n\r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "ancestors()",
    "map()",
    "reverse()"
  ]
},{
  "_id": {
    "$oid": "5f18129e8031ac071e1d9f4e"
  },
  "course_id": 38,
  "title": "给饼图上色",
  "text": "##### 描述：\r\n在给饼图上色之前，我们还要学习两个重要的知识`d3.scaleOrdinal()`,`d3.interpolateSpectral()`。\r\n\r\n`d3.interpolateSpectral(t)`  是给定一个范围在 [0,1] 的值 t，返回一个经过 “Spectral” 颜色方案插值后对应的值，以 RGB 字符串表示。\r\n\r\nSpectral颜色方案：\r\n![](../data/Spectral.png)\r\n\r\n简单来说，`d3.interpolateSpectral()`就是是D3提供的一个颜色集，返回红、橙、黄、绿、青、蓝、紫这样连续的光谱色。\r\n\r\n前面我们详细介绍了用D3创建线性比例尺和其中的`domain()`、`range()`方法，这里不再赘述。\r\n\r\n`d3.scaleOrdinal()`是使用空的输入域和指定的 `range`构造一个序数比例尺。如果没有指定` range` 则默认为空数组。序数比例尺在定义非空的输入域之前，总是返回` undefined`。\r\n\r\n序数比例尺**离散**的。 现实中可能会有这样的需求，通过输入一些离散的值(如名称、序号、ID等)，要得到另一些离散的值(如颜色等)，这种时候就要考虑序数比例尺了。\r\n\r\n这时候就可以给饼图上色了。\r\n\r\n我们可以直接使用光谱：\r\n\r\n```\r\nconst color = d3.scaleOrdinal() //离散到离散比例尺\r\n                .domain(data.map(d => d.name))\r\n                .range(d3.quantize(d3.interpolateSpectral, data.length)) \r\n```\r\n\r\n`range(d3.quantize(d3.interpolateSpectral, data.length))`就是把连续的光谱色均匀地插值为扇形个数种颜色，每一个扇形对应一种颜色。\r\n\r\n当然我们还可以把光谱替换为普通的自定义插值试试：\r\n```\r\nconst color = d3.scaleOrdinal() //离散到离散比例尺\r\n                .domain(data.map(d => d.name))\r\n                .range(d3.quantize(d3.interpolate(\"red\",\"yellow\"), data.length)) \r\n```\r\n你可以试试看会出现怎样的配色。\r\n\r\n-----\r\n##### 任务：\r\n定义一个序数比例尺，使用光谱给饼图上色。\r\n\r\n\r\n\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.scaleOrdinal</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.scaleOrdinal/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.interpolateSpectral</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.interpolateSpectral/)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n        const height = 500\r\n        const width = 500\r\n        \r\n        const data = [\r\n            { name: \"<5\", value: 19912018 },\r\n            { name: \"5-9\", value: 20501982 },\r\n            { name: \"10-14\", value: 20679786 },\r\n            { name: \"15-19\", value: 21354481 },\r\n            { name: \"20-24\", value: 22604232 },\r\n            { name: \"25-29\", value: 21698010 },\r\n            { name: \"30-34\", value: 21183639 },\r\n            { name: \"35-39\", value: 19855782 },\r\n            { name: \"40-44\", value: 20796128 },\r\n            { name: \"45-49\", value: 21370368 },\r\n            { name: \"50-54\", value: 22525490 },\r\n            { name: \"55-59\", value: 21001947 },\r\n            { name: \"60-64\", value: 18415681 },\r\n            { name: \"65-69\", value: 14547446 },\r\n            { name: \"70-74\", value: 10587721 },\r\n            { name: \"75-79\", value: 7730129 },\r\n            { name: \"80-84\", value: 5811429 },\r\n            { name: \"≥85\", value: 5938752 }\r\n        ]\r\n\r\n        const arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(Math.min(width, height) / 2 - 1)//直径撑满屏幕\r\n        \r\n        const pie = d3.pie()\r\n                .sort(null)\r\n                .value(d => d.value)\r\n        \r\n        const arcs = pie(data);\r\n\r\n        const color = undefined//请在此处修改您的代码\r\n\r\n                const radius = Math.min(width, height) / 2 * 0.8;//标签距离圆心的位置\r\n        \r\n        const arcLabel = d3.arc()\r\n                        .innerRadius(radius)\r\n                        .outerRadius(radius);\r\n        \r\n        const svg = d3.select(\"body\")\r\n                .append(\"svg\")\r\n                .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\r\n            \r\n            //弧及其颜色\r\n            svg.append(\"g\")\r\n                .attr(\"stroke\", \"white\")\r\n                .selectAll(\"path\")\r\n                .data(arcs)\r\n                .join(\"path\")\r\n                .attr(\"fill\", d => color(d.data.name))\r\n                .attr(\"d\", arc)\r\n\r\n                .append(\"title\")\r\n                .text(d => `${d.data.name}: ${d.data.value}`);//模板字符串，下面有替换的形式\r\n            \r\n            //年龄段\r\n            svg.append(\"g\")\r\n                .attr(\"font-family\", \"sans-serif\")\r\n                .attr(\"font-size\", 12)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .selectAll(\"text\")\r\n                .data(arcs)\r\n                .join(\"text\")\r\n                .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)//等价于'translate('+arcLabel.centroid(d)+')')\r\n                .attr(\"y\", \"-0.4em\")\r\n                .attr(\"font-weight\", \"bold\")\r\n                .text(d => d.data.name)//使用call函数为每个text添加子元素tspan并设定字体属性。\r\n\r\n            //人数\r\n            svg.append(\"g\")\r\n                .attr(\"font-family\", \"sans-serif\")\r\n                .attr(\"font-size\", 12)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .selectAll(\"text\")\r\n                .data(arcs)\r\n                .join(\"text\")\r\n                .attr(\"transform\", d => 'translate(' + arcLabel.centroid(d) + ')')//标签位置，参数可以任意只要里面包含了startAngle和endAngle就可\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", \"0.7em\")\r\n                .attr(\"fill-opacity\", 0.7)\r\n                .text(d => {\r\n                    if (d.endAngle - d.startAngle > 0.25)\r\n                        return d.data.value.toLocaleString()\r\n                });\r\n        \r\n  </script>\r\n</body>\r\n",
  "concept": [
    "interpolateSpectral()",
    "scaleOrdinal()"
  ]
},{
  "_id": {
    "$oid": "5f1824ed8031ac071e1d9f4f"
  },
  "course_id": 33,
  "title": "饼图中的弧生成器",
  "text": "##### 描述：\r\n得到各个扇形的角度数据之后就可以开始绘制饼图了。\r\n\r\nSVG 有一个元素，叫做路径 `path`，是 `SVG` 中功能最强的元素，它可以表示其它任意图形。顾名思义，路径元素就是通过定义一段\"路径\"，来绘制出各种图形。\r\n\r\n但是，路径是很难计算的，通过布局转换后的数据仍然很难手动计算得到路径值。\r\n\r\n而D3提供了**弧生成器**来为我们生成路径，饼图的每一部分都是一段弧。\r\n\r\n```\r\nconst arc = d3.arc()\r\n    .innerRadius(0)\r\n    .outerRadius(Math.min(width, height) / 2 - 1)//直径撑满屏幕\r\n```\r\n\r\n其中，Math.min(width, height) 是取width和height两者的较小值。\r\n\r\n弧生成器中，有如下几种方法：\r\n* arc.centroid(arguments…)：计算由给定 arguments 生成的 中间点 [x, y]. arguments 是任意的\r\n* arc.innerRadius([radius])：内半径\r\n* arc.outerRadius([radius])：外半径\r\n* arc.cornerRadius([radius])：拐角半径\r\n* arc.startAngle([angle])：起始角度\r\n* arc.endAngle([angle])：终止角度\r\n* arc.padAngle([angle])：间隙角度\r\n\r\n\r\n我们可以将它与`pie()`方法联系起来，`pie` 生成器用来计算一组数据作为饼图或圆环图时所需要的角度信息；这些角度信息会被传递给` arc `生成器生成图形。\r\n\r\n\r\n\r\n\r\n-----\r\n##### 任务\r\n使用弧生成器，并设置内半径为0，外半径为200。\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"你应该使用弧生成器生成的结果来绘制图形\",\r\n    \"teststring\": \"code.match(/\\\\.attr\\\\(\\\\s*\\\"d\\\"\\\\s*,\\\\s*(arc|\\\\s*.\\\\s*=>\\\\s*arc\\\\(\\\\s*.\\\\s*\\\\))\\\\s*\\\\)/g)\"\r\n   },\r\n   { \r\n    \"text\": \"内半径<code>innerRadius</code>的值应为0。\",\r\n    \"teststring\": \"$('innerRadius') == '0'\"\r\n   },\r\n   { \r\n    \"text\": \"内半径<code>outerRadius</code>的值应为200。\",\r\n    \"teststring\": \"$('outerRadius') == '200'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const height = 500\r\n    const width = 500\r\n        \r\n    const data = [\r\n        { name: \"<5\", value: 19912018 },\r\n        { name: \"5-9\", value: 20501982 },\r\n        { name: \"10-14\", value: 20679786 },\r\n        { name: \"15-19\", value: 21354481 },\r\n        { name: \"20-24\", value: 22604232 },\r\n        { name: \"25-29\", value: 21698010 },\r\n        { name: \"30-34\", value: 21183639 },\r\n        { name: \"35-39\", value: 19855782 },\r\n        { name: \"40-44\", value: 20796128 },\r\n        { name: \"45-49\", value: 21370368 },\r\n        { name: \"50-54\", value: 22525490 },\r\n        { name: \"55-59\", value: 21001947 },\r\n        { name: \"60-64\", value: 18415681 },\r\n        { name: \"65-69\", value: 14547446 },\r\n        { name: \"70-74\", value: 10587721 },\r\n        { name: \"75-79\", value: 7730129 },\r\n        { name: \"80-84\", value: 5811429 },\r\n        { name: \"≥85\", value: 5938752 }\r\n    ]\r\n    \r\n    const pie = d3.pie()\r\n                .sort(null)\r\n                .value(d => d.value)\r\n        \r\n    const arcs = pie(data)\r\n\r\n  // 在下面添加你的代码\r\n       \r\n       \r\n       \r\n  // 在上面添加你的代码\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "arc"
  ]
},{
  "_id": {
    "$oid": "5f1850c78031ac071e1d9f50"
  },
  "course_id": 34,
  "title": "饼图中的布局",
  "text": "##### 描述：\r\n首先，我们来看看SVG中的`viewBox`。\r\n\r\n`viewBox`属性允许指定一个给定的一组图形伸展以适应特定的容器元素。\r\n\r\n`viewBox`属性的值是一个包含4个参数的列表 `min-x`, `min-y`, `width` and `height`， 以空格或者逗号分隔开。\r\n\r\n* `min-x`：左上角横坐标\r\n* `min-y`：左上角纵坐标\r\n* `width`：宽度\r\n* `height`：高度\r\n\r\n特别注意，不允许宽度和高度为负值，0则禁用元素的呈现。\r\n\r\n比如`viewbox=\"0 0 100 100\"`\r\n\r\n假设我们定义的画布尺寸是200 x 200px。而`viewBox`属性定义了画布上可以显示的区域：从(0,0)点开始，宽为100高为100的区域。这个100 x 100的区域，会放到200 x 200的画布上显示。于是就形成了放大两倍的效果。\r\n\r\n简单来说，我们可以将`SVG`理解为显示器，`viewBox`则是截图工具的选中框，最终的呈现就是把框框中的截屏内容在此在显示器中全屏显示。\r\n\r\n更直观的解释：\r\n\r\n1、如果没有viewBox，应该是长这样的：\r\n\r\n![](../data/viewBox1.png)\r\n\r\n矩形大小只有整个SVG舞台的1/20.\r\n\r\n2、当我们设置`viewBox`=\"0, 0, 40, 30\"，相当于在SVG``上圈了下图左上角所示的一个框框：\r\n![](../data/viewBox2.png)\r\n\r\n3、然后把这个框框，连同框框里的小矩形一起放大到整个SVG大小（如下gif）:\r\n![](../data/viewbox.gif)\r\n\r\n那么我们绘制饼图的时候也可以在SVG画布中好好利用这个”视图框“。\r\n\r\n```\r\nconst svg = d3.select(\"body\")\r\n                .append(\"svg\")\r\n                .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\r\n```\r\n这里的attr()方法就是设置viewBox的四个属性。\r\n\r\n其中，`min-x`和`min-y`如果设置的是正值，图像反而会向左/上移动，而设置负值则向右/下移动。`viewBox`的左上角总是和视窗的左上角对齐。\r\n\r\n\r\n-----\r\n##### 任务：\r\n添加一个SVG画布，并设置viewBox的属性min-x, min-y, width and height分别为0 0 200 200。\r\n\r\n\r\n\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>viewBox</code>属性的<code>min-x</code>属性应设置为0\",\r\n    \"teststring\": \"$('viewBox').attr('min-x') == '0'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>viewBox</code>属性的<code>min-y</code>属性应设置为0\",\r\n    \"teststring\": \"$('viewBox').attr('min-y') == '0'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>viewBox</code>属性的<code>width</code>属性应设置为200\",\r\n    \"teststring\": \"$('viewBox').attr('width') == '200'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>viewBox</code>属性的<code>height</code>属性应设置为200\",\r\n    \"teststring\": \"$('viewBox').attr('height') == '200'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n        const height = 500\r\n        const width = 500\r\n        \r\n        const data = [\r\n            { name: \"<5\", value: 19912018 },\r\n            { name: \"5-9\", value: 20501982 },\r\n            { name: \"10-14\", value: 20679786 },\r\n            { name: \"15-19\", value: 21354481 },\r\n            { name: \"20-24\", value: 22604232 },\r\n            { name: \"25-29\", value: 21698010 },\r\n            { name: \"30-34\", value: 21183639 },\r\n            { name: \"35-39\", value: 19855782 },\r\n            { name: \"40-44\", value: 20796128 },\r\n            { name: \"45-49\", value: 21370368 },\r\n            { name: \"50-54\", value: 22525490 },\r\n            { name: \"55-59\", value: 21001947 },\r\n            { name: \"60-64\", value: 18415681 },\r\n            { name: \"65-69\", value: 14547446 },\r\n            { name: \"70-74\", value: 10587721 },\r\n            { name: \"75-79\", value: 7730129 },\r\n            { name: \"80-84\", value: 5811429 },\r\n            { name: \"≥85\", value: 5938752 }\r\n        ]\r\n\r\n        const arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(Math.min(width, height) / 2 - 1)//直径撑满屏幕\r\n        \r\n        const pie = d3.pie()\r\n                .sort(null)\r\n                .value(d => d.value)\r\n        \r\n        const arcs = pie(data);\r\n\r\n        const color = d3.scaleOrdinal() //离散到离散比例尺\r\n                .domain(data.map(d => d.name))\r\n                .range(d3.quantize(d3.interpolateSpectral, data.length)) //把光谱替换为普通的自定义插值试试d3.interpolate(\"red\",\"yellow\") \r\n        \r\n        //在下面填写你的代码\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        //在上面填写你的代码\r\n  \r\n  </script>\r\n</body>\r\n",
  "concept": [
    "viewBox"
  ]
},{
  "_id": {
    "$oid": "5f20dd796a62dbaaee2dc692"
  },
  "course_id": 32,
  "title": "使用D3进行数据转换",
  "text": "##### 描述\r\n饼图（Pie Chart），或称饼状图，是一个划分为几个扇形的圆形统计图表，用于描述量、频率或百分比之间的相对关系。 在饼图中，每个扇区的弧长（以及圆心角和面积）大小为其所表示的数量的比例。\r\n\r\n在画图之前，首先，我们来了解一下D3画图的一个重要概念，就是布局。\r\n布局是什么，其实就是数据转换。假设有数据[5,10,15,20,25,30] 。要将这个数据画成饼状图，直接使用数组中的数据是不行的，需要将数据转换成扇形的起始角度和终止角度。构成整个圆形，这个过程如果自己画，显然太过于复杂，所以d3js把这些数据转化通过布局直接完成。目前已经提供来很多的布局，如Pie(饼状图)，Chord(弦图)，Histogram（直方图）等。\r\n\r\n接下来，我们将学习如何绘制饼图。\r\n\r\n首先，我们定义一个布局：\r\n```\r\npie = d3.pie()\r\n    .sort(null) //按数据原始数据排序\r\n    .value(d => d.value)\r\n```\r\n`d3.pie()`创建布局器，`.value(d => d.value)`设置布局器的取值过滤器。\r\n\r\n在饼布局中，有如下属性可供使用：\r\n* d3.pie - 构造一个新的默认的饼布局。\r\n* pie.endAngle -取得或设置饼布局整体的结束角度。\r\n* pie.padAngle - 取得或设置饼布局填充角度。\r\n* pie.sort - 控制饼片段的顺时针方向的顺序。\r\n* pie.startAngle - 取得或设置饼布局整体的开始角度。\r\n* pie.value - 取得或设置值访问器函数。\r\n* pie - 计算饼图或圆环图中弧的开始和结束角度。\r\n\r\npie 主要是将输入的原始数据转换成 arc 可以使用的具有开始角度结束角度以及其他必要信息的数据。\r\n\r\n`const arcs = pie(data);`\r\n\r\n此处数据转换将数组`data` 作为` pie() `的参数，返回值给`arcs`。如此一来，`arcs`就是转换后的数据。简单吧，非常轻松就得到了。下面我们看看数据转换成什么样了。  \r\n![](../data/pie_chart_data.png)\r\n\r\n* data: 输入的数组的当前项的原始数据\r\n* value: 根据原始数据中的那个数据生成的弧的信息（上例中这个值与 data 相同）\r\n* index：当前弧在生成的所有弧中的排序\r\n* startAngle: 弧的开始角度\r\n* endAngle: 弧的结束角度\r\n* padAngle: 弧的垫角（和左右两边相邻饼图的距离，默认值是 0）\r\n\r\n如上图所示，18个整数被转换成了18 个对象（`Object`） ，以上这些属性都是绘图需要的数据。\r\n\r\n\r\n\r\n\r\n-----\r\n##### 任务\r\n创建饼图布局并按原始数据排序。\r\n\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>pie</code>方法\",\r\n    \"teststring\": \"code.match(/d3\\\\.pie/g)\"\r\n   },\r\n   { \r\n    \"text\": \"您应该设置排序方式为null\",\r\n    \"teststring\": \"code.match(\\\\s*d3\\\\.null\\\\s*\\\\)/g)\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  const data = [\r\n            { name: \"<5\", value: 19912018 },\r\n            { name: \"5-9\", value: 20501982 },\r\n            { name: \"10-14\", value: 20679786 },\r\n            { name: \"15-19\", value: 21354481 },\r\n            { name: \"20-24\", value: 22604232 },\r\n            { name: \"25-29\", value: 21698010 },\r\n            { name: \"30-34\", value: 21183639 },\r\n            { name: \"35-39\", value: 19855782 },\r\n            { name: \"40-44\", value: 20796128 },\r\n            { name: \"45-49\", value: 21370368 },\r\n            { name: \"50-54\", value: 22525490 },\r\n            { name: \"55-59\", value: 21001947 },\r\n            { name: \"60-64\", value: 18415681 },\r\n            { name: \"65-69\", value: 14547446 },\r\n            { name: \"70-74\", value: 10587721 },\r\n            { name: \"75-79\", value: 7730129 },\r\n            { name: \"80-84\", value: 5811429 },\r\n            { name: \"≥85\", value: 5938752 }\r\n    ];\r\n    \r\n    const pie = undefined//请在这里修改您的代码\r\n    \r\n    const arcs = pie(data);\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "pie()"
  ]
},{
  "_id": {
    "$oid": "5f21e0756a62dbaaee2dc693"
  },
  "course_id": 54,
  "title": "让你的力导向图充满色彩",
  "text": "##### 描述：\r\n目前我们的力导向图已经有了雏形，但是颜色还有一些单调。在实际应用中，我们往往需要给不同的节点和连线赋予相对应的颜色来突出其所对应的组别。\r\n\r\n\r\n我们可以使用D3提供的序数比例尺和颜色比例尺来为节点和连线赋予不同的颜色。\r\n\r\n`d3.scaleOrdinal() `序数比例尺，`d3.scaleOrdinal()`的输入域和输出域都使用离散的数据。\r\n\r\n```\r\nlet scale = d3.scaleOrdinal().domain(['jack', 'rose', 'john']).range([10, 20, 30])\r\n```\r\n输入与输出：\r\n```\r\nscale('jack') // 输出:10\r\nscale('rose') // 输出:20\r\nscale('john') // 输出:30\r\n```\r\n\r\nD3提供了一些颜色比例尺，10就是10种颜色，20就是20种：\r\n\r\n```\r\nd3.schemeCategory10\r\nd3.schemeCategory20\r\nd3.schemeCategory20b\r\nd3.schemeCategory20c\r\n\r\n// 定义一个序数颜色比例尺\r\nconst color = d3.scaleOrdinal()\r\n    \t\t.domain(10)\r\n    \t\t.range(d3.schemeCategory10);\r\n```\r\n\r\n\r\n----\r\n##### 任务：\r\n定义一个序数颜色比例尺，输入域`domain()`中设为`nodes`的个数即`nodes.length`,输出域`range()`中设为10色颜色比例尺。\r\n\r\n通过序数颜色比例尺，利用`stroke`属性给连线设置颜色，利用`fill`属性给节点设置颜色。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法\",\r\n    \"teststring\":  \"code.match(/\\\\.attr/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.scaleOrdinal()</code>方法\",\r\n    \"teststring\":  \"code.match(/d3\\\\.scaleOrdinal()/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>nodes.length</code>\",\r\n    \"teststring\":  \"code.match(/nodes\\\\.length/)\"\r\n   },\r\n   { \r\n    \"text\": \"您的代码应该使用<code>d3.schemeCategory10</code>\",\r\n    \"teststring\":  \"code.match(/d3\\\\.schemeCategory10/)\"\r\n   },\r\n   { \r\n    \"text\": \"<code>circle</code>的<code>fill</code>值不应为空。\",\r\n    \"teststring\": \"$('circle').eq(0).attr('fill') != null\"\r\n   },\r\n   { \r\n    \"text\": \"<code>line</code>的<code>stroke</code>值不应为空。\",\r\n    \"teststring\": \"$('line').eq(0).attr('stroke') != null\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n    <script>\r\n        const svg = d3.select(\"body\")\r\n                      .append(\"svg\")\r\n                      .attr(\"width\",400)\r\n                      .attr(\"height\",500)\r\n        //节点数据\r\n        const nodes = [\r\n            { name: \"湖南邵阳\" },\r\n            { name: \"山东莱州\" },\r\n            { name: \"广东阳江\" },\r\n            { name: \"山东枣庄\" },\r\n            { name: \"泽\" },\r\n            { name: \"恒\" },\r\n            { name: \"鑫\" },\r\n            { name: \"明山\" },\r\n            { name: \"班长\" }\r\n        ];\r\n        //边数据\r\n        const links = [\r\n            { source: 0, target: 4, relation: \"籍贯\", value: 1.3 },\r\n            { source: 4, target: 5, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 6, relation: \"舍友\", value: 1 },\r\n            { source: 4, target: 7, relation: \"舍友\", value: 1 },\r\n            { source: 1, target: 6, relation: \"籍贯\", value: 2 },\r\n            { source: 2, target: 5, relation: \"籍贯\", value: 0.9 },\r\n            { source: 3, target: 7, relation: \"籍贯\", value: 1 },\r\n            { source: 5, target: 6, relation: \"同学\", value: 1.6 },\r\n            { source: 6, target: 7, relation: \"朋友\", value: 0.7 },\r\n            { source: 6, target: 8, relation: \"职责\", value: 2 }\r\n        ];\r\n        // 在下面添加你的代码\r\n        \r\n        const colorScale = undefined \r\n        \r\n        \r\n        // 在上面添加你的代码\r\n        //新建力导向图\r\n        const simulation = d3.forceSimulation(nodes)\r\n            .force(\"link\", d3.forceLink(links).distance((d)=>d.value*100))\r\n            .force(\"charge\", d3.forceManyBody())\r\n            .force(\"center\", d3.forceCenter(200,250));\r\n        //绘制边\r\n        const link = svg.append(\"g\")\r\n            .selectAll(\"line\")\r\n            .data(links)\r\n            .enter()\r\n            .append(\"line\")\r\n            // 在下面添加你的代码\r\n        \r\n            // 在上面添加你的代码\r\n            .attr(\"stroke-width\", 1);\r\n        //绘制节点\t\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(nodes)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10)\r\n            // 在下面添加你的代码\r\n        \r\n            // 在上面添加你的代码\r\n            .call(d3.drag()\r\n    \t\t.on(\"start\",started)\r\n    \t    .on(\"drag\",dragged)//力导向图可以被拖动\r\n    \t\t.on(\"end\",ended));\r\n            \r\n        const linkText = svg.append(\"g\")\r\n    \t\t.selectAll(\"text\")\r\n    \t\t.data(links)\r\n    \t\t.enter()\r\n    \t\t.append(\"text\")\r\n    \t\t.text((d)=> d.relation);\r\n\r\n        const nodeText = svg.append(\"g\")\r\n    \t\t.selectAll(\"text\")\r\n    \t\t.data(nodes)\r\n    \t\t.enter()\r\n    \t\t.append(\"text\")\r\n    \t\t.text((d) => d.name);\r\n\r\n        //添加tick监听\r\n        simulation.on(\"tick\", () => {\r\n            link\r\n                .attr(\"x1\", (d) => d.source.x)\r\n                .attr(\"y1\", (d) => d.source.y)\r\n                .attr(\"x2\", (d) => d.target.x)\r\n                .attr(\"y2\", (d) => d.target.y);\r\n            node\r\n                .attr(\"cx\", (d) => d.x)\r\n                .attr(\"cy\", (d) => d.y);\r\n            linkText\r\n    \t\t\t.attr(\"x\", (d) => (d.source.x+d.target.x)/2)\r\n                .attr(\"y\", (d) => (d.source.y+d.target.y)/2);\r\n            nodeText\r\n                .attr(\"x\", d => d.x - 5)\r\n                .attr(\"y\", d => d.y - 10);\r\n        });\r\n        function started(d){\r\n    \t\tif(!d3.event.active){\r\n    \t\t\tsimulation.alphaTarget(0.8).restart();//设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\r\n    \t\t}\r\n    \t\td.fx = d.x;\r\n    \t\td.fy = d.y;\r\n    \t}\r\n    \tfunction dragged(d){\r\n    \t\td.fx = d3.event.x;\r\n    \t\td.fy = d3.event.y;\r\n    \t}\r\n    \tfunction ended(d){\r\n    \t\tif(!d3.event.active){\r\n    \t\t\tsimulation.alphaTarget(0);\r\n    \t\t}\r\n    \t\td.fx = null;\r\n    \t\td.fy = null;\r\n    \t}\r\n    </script>\r\n</body>\r\n",
  "concept": [
    ""
  ]
},{
  "_id": {
    "$oid": "5f2425bd6a62dbaaee2dc695"
  },
  "course_id": 35,
  "title": "在画布上绘制扇形",
  "text": "##### 描述：\r\n首先，我们先学习`SVG`中的`path`。SVG的`path`标签被称为”可以组成任何形状的路径”，它可以绘制任何形状的图形，包括矩形，圆形，椭圆，折线，多边形，直线，曲线等。\r\n\r\n我们可以用钢笔和纸来表示`SVG`中的`path`：\r\n\r\n* 想象一个钢笔放在一张纸上。\r\n* 钢笔在某点与纸接触。\r\n* 笔尖移动到另一处。\r\n* 这两个点之间的路径可以是直线或曲线。\r\n* 曲线可以是一个弧,一立方曲线或二次贝塞尔曲线。\r\n\r\n这意味着我们可以使用`SVG`路径做出任何类型的`SVG`形状。\r\n\r\n`SVG`中的`Path`元素的形状被一个属性所定义：`d`。\r\n\r\n`d`这个属性，包含一系列的方法与参数，因此我们可以把这个属性称作一个“微语言”。\r\n\r\n这些方法与参数其实就是告诉电脑”如何在纸上移动你的钢笔”。\r\n\r\n`d`属性的参数有：\r\n* M = moveto(M X,Y) ：将画笔移动到指定的坐标位置\r\n* L = lineto(L X,Y) ：画直线到指定的坐标位置\r\n* H = horizontal lineto(H X)：画水平线到指定的X坐标位置\r\n* V = vertical lineto(V Y)：画垂直线到指定的Y坐标位置\r\n* A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)： 椭圆弧\r\n* Z = closepath()：关闭路径\r\n \r\n 我们简单看下`path`标签的基本用法：\r\n \r\n`<path d=\"M100,100 L200,200 L200,400\" fill=\"#333\" stroke=\"#000\" />`\r\n\r\n`path`标签通过属性`d`来定义路径，定义信息由一段路径字符串构成，另外`path`也可以通过`fill`（填充颜色）和`stroke`（描边颜色）属性来定义填充和边框。\r\n\r\n`d`属性的路径字符串其实并不复杂，由字母和数字构成，数字表示坐标点，字母表示如何连接这些坐标点。\r\n\r\n比如上面的示例中，M表示起点，L表示直线连接，所以d的信息也可以这样解读：\r\n\r\n* M100,100    ->    以（100，100）坐标点为起点\r\n* L200,200    ->    从（100，100）向（200，200）画一条直线\r\n* L200,400    ->    从（200，200）向（200，400）画一条直线\r\n\r\n接下来，我们看看` # selection.join（输入[，更新] [，退出]）`\r\n\r\n在d3.js新版本（V5）中增加的`selection.join`方法大大简化了数据的`update`,`enter`,`exit`。\r\n\r\n它的意思是根据需要追加、删除和重新排序元素，以匹配先前由`selection.data`绑定的数据，并返回`merged`输入并更新选择。\r\n\r\n我们可以这样来理解：`selection.join`相当于`enter` + `append`。\r\n\r\n```\r\nsvg.append(\"g\")\r\n                .attr(\"stroke\", \"white\") //stroke：描边颜色\r\n                .selectAll(\"path\")\r\n                .data(arcs)\r\n                .join(\"path\")\r\n                .attr(\"fill\", d => color(d.data.name)) //fill：填充颜色\r\n                .attr(\"d\", arc)\r\n\r\n                .append(\"title\")\r\n                .text(d => `${d.data.name}: ${d.data.value}`);//模板字符串，下面有替换的形式\r\n```\r\n\r\n其中“`g`”元素可以理解为“`group`”，将“`g`”元素附加到`SVG`。 `g`元素用于将`SVG`形状分组在一起，因此不是`d3`特定的，而是`SVG`特定的标签。\r\n-----\r\n##### 任务：\r\n将扇形的描边颜色设置为黑色，且数据绑定为arcs。\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您应该使用<code>data</code>方法并设置间隔为arcs\",\r\n    \"teststring\": \"code.match(/\\\\.data\\\\(\\\\s*arcs\\\\s*\\\\)/g)\"\r\n   },\r\n    { \r\n    \"text\": \"<code>stroke</code>值应为black\",\r\n    \"teststring\": \"$('g').attr('stroke') == 'black'\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n        const height = 500\r\n        const width = 500\r\n        \r\n        const data = [\r\n            { name: \"<5\", value: 19912018 },\r\n            { name: \"5-9\", value: 20501982 },\r\n            { name: \"10-14\", value: 20679786 },\r\n            { name: \"15-19\", value: 21354481 },\r\n            { name: \"20-24\", value: 22604232 },\r\n            { name: \"25-29\", value: 21698010 },\r\n            { name: \"30-34\", value: 21183639 },\r\n            { name: \"35-39\", value: 19855782 },\r\n            { name: \"40-44\", value: 20796128 },\r\n            { name: \"45-49\", value: 21370368 },\r\n            { name: \"50-54\", value: 22525490 },\r\n            { name: \"55-59\", value: 21001947 },\r\n            { name: \"60-64\", value: 18415681 },\r\n            { name: \"65-69\", value: 14547446 },\r\n            { name: \"70-74\", value: 10587721 },\r\n            { name: \"75-79\", value: 7730129 },\r\n            { name: \"80-84\", value: 5811429 },\r\n            { name: \"≥85\", value: 5938752 }\r\n        ]\r\n\r\n        const arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(Math.min(width, height) / 2 - 1)//直径撑满屏幕\r\n        \r\n        const pie = d3.pie()\r\n                .sort(null)\r\n                .value(d => d.value)\r\n        \r\n        const arcs = pie(data);\r\n        \r\n        const svg = d3.select(\"body\")\r\n                .append(\"svg\")\r\n                .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\r\n        \r\n        //在下面输入你的代码\r\n        svg.append(\"g\")\r\n                .attr(\"stroke\", \"white\") //stroke：描边颜色\r\n                .selectAll(\"path\")\r\n                .data(arcs)\r\n                .join(\"path\")\r\n                .attr(\"fill\", d => color(d.data.name)) //fill：填充颜色\r\n                .attr(\"d\", arc)\r\n\r\n                .append(\"title\")\r\n                .text(d => `${d.data.name}: ${d.data.value}`);//模板字符串，下面有替换的形式\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        //在上面输入你的代码\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "path",
    "selection.join"
  ]
},{
  "_id": {
    "$oid": "5f297f0bc7a38b281067cb3e"
  },
  "course_id": 36,
  "title": "给饼图加上文字标签",
  "text": "##### 任务：\r\n为了使饼图上的文字标签排列得更为整洁有序，我们可以想象成：在原来饼图的基础上再绘制一个“无形的环”，这个不存在的环内外半径是相同的，因而类死于一个“圆”。我们利用这个“无形的环”上每个扇形的中心点的坐标来固定文字标签。\r\n\r\n```\r\n const radius = Math.min(width, height) / 2 * 0.8;//标签距离圆心的位置\r\n\r\n\tconst arcLabel = d3.arc()\r\n\t\t\t\t\t\t.innerRadius(radius)\r\n\t\t\t\t\t\t.outerRadius(radius);\r\n```\r\n\r\n上面的例子中我们定义一个arc生成器是为了得到文字标签的坐标，而标签距离圆心的位置决定了文字标签的坐标。所以我们得明确`radius`这一变量。\r\n\r\n我们将圆心做为坐标轴的中心点，这些文字标签的起始坐标都是(0, 0)，是和圆心挤在一起的。所以很容易想到需要对文字标签进行移动，那么这里我们就要用到`transform`属性。\r\n\r\nCSS中的transform属性允许你旋转、缩放、倾斜或平移给定元素。由于我们只需要平移文字标签，所以只需要translate属性。例如：\r\n\r\n`<text transform=\"translate(100px, 200px)\"></text> `\r\n\r\ntranslate(x,y)指的是向水平方向和垂直方向同时移动。x和y若为负值就向反方向移动，如果只需要实现x轴方向上的移动，使用translateX，实现y轴方向上的移动，使用translateY。\r\n\r\n此外，transform还有诸如旋转rotate、扭曲skew、缩放scale和矩阵变形matrix的属性。\r\n\r\n注意：表示一个或多个函数变换时以空格分开而不是逗号。如下：\r\n\r\n`transform: scale(0.5) translate(-100%, -100%);`\r\n\r\n前面我们提到`arcs`：\r\n```\r\nconst pie = d3.pie()\r\n\t\t\t.sort(null)\r\n\t\t\t.value(d => d.value)\r\n\r\nconst arcs = pie(data)\r\n```\r\n\r\n为什么要绑定`arcs`呢？\r\n\r\n我们需要使用arcs这一转换后的数据输入到新定义的弧生成器中的`arcLabel.centroid()`中，然后返回arcs中每个数据对应的扇形的中心点坐标。\r\n\r\n-----\r\n##### 任务：\r\n将年龄段文字标签的字体也设置为sans-serif，字体大小为12，居中显示。\r\n\r\n\r\n",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"<code>g</code>元素的<code>font-family</code>属性应设置为sans-serif。\",\r\n    \"teststring\": \"$('g').attr('font-family') == 'sans-serif'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>g</code>元素的<code>font-size</code>属性应设置为12\",\r\n    \"teststring\": \"$('g').attr('font-size') == '12'\"\r\n   },\r\n   { \r\n    \"text\": \"<code>g</code>元素的<code>text-anchor</code>属性应设置为middle\",\r\n    \"teststring\": \"$('g').attr('text-anchor') == 'middle'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script><script>\r\n        const height = 500\r\n        const width = 500\r\n        \r\n        const data = [\r\n            { name: \"<5\", value: 19912018 },\r\n            { name: \"5-9\", value: 20501982 },\r\n            { name: \"10-14\", value: 20679786 },\r\n            { name: \"15-19\", value: 21354481 },\r\n            { name: \"20-24\", value: 22604232 },\r\n            { name: \"25-29\", value: 21698010 },\r\n            { name: \"30-34\", value: 21183639 },\r\n            { name: \"35-39\", value: 19855782 },\r\n            { name: \"40-44\", value: 20796128 },\r\n            { name: \"45-49\", value: 21370368 },\r\n            { name: \"50-54\", value: 22525490 },\r\n            { name: \"55-59\", value: 21001947 },\r\n            { name: \"60-64\", value: 18415681 },\r\n            { name: \"65-69\", value: 14547446 },\r\n            { name: \"70-74\", value: 10587721 },\r\n            { name: \"75-79\", value: 7730129 },\r\n            { name: \"80-84\", value: 5811429 },\r\n            { name: \"≥85\", value: 5938752 }\r\n        ]\r\n\r\n        const arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(Math.min(width, height) / 2 - 1)//直径撑满屏幕\r\n        \r\n        const pie = d3.pie()\r\n                .sort(null)\r\n                .value(d => d.value)\r\n        \r\n        const arcs = pie(data);\r\n\r\n        const color = d3.scaleOrdinal() //离散到离散比例尺\r\n                .domain(data.map(d => d.name))\r\n                .range(d3.quantize(d3.interpolateSpectral, data.length)) //把光谱替换为普通的自定义插值试试d3.interpolate(\"red\",\"yellow\") \r\n        \r\n        const radius = Math.min(width, height) / 2 * 0.8;//标签距离圆心的位置\r\n        \r\n        const arcLabel = d3.arc()\r\n                        .innerRadius(radius)\r\n                        .outerRadius(radius);\r\n        \r\n        const svg = d3.select(\"body\")\r\n                .append(\"svg\")\r\n                .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\r\n                \r\n        //年龄段\r\n        svg.append(\"g\")\r\n                .attr(\"font-family\", undefined)//字体\r\n                .attr(\"font-size\", undefined)\r\n                .attr(\"text-anchor\", undefined)//该文本与所给点居中对齐，还可设置为start |end | inherit\r\n                .selectAll(\"text\")\r\n\t\t\t\t\t\t\t\t.data(arcs) //绑定预先准备好的经过布局器转换后的数据\r\n                .join(\"text\")\r\n                .attr(\"transform\", d => `translate(${arcLabel.centroid(d)})`)//等价于'translate('+arcLabel.centroid(d)+')')\r\n                .attr(\"y\", \"-0.4em\")\r\n                .attr(\"font-weight\", \"bold\")\r\n                .text(d => d.data.name)//使用call函数为每个text添加子元素tspan并设定字体属性。\r\n        \r\n        //人数\r\n        svg.append(\"g\")\r\n                .attr(\"font-family\", \"sans-serif\")\r\n                .attr(\"font-size\", 12)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .selectAll(\"text\")\r\n                .data(arcs)\r\n                .join(\"text\")\r\n                .attr(\"transform\", d => 'translate(' + arcLabel.centroid(d) + ')')//标签位置，参数可以任意只要里面包含了startAngle和endAngle就可\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", \"0.7em\")\r\n                .attr(\"fill-opacity\", 0.7) //该属性指定了填色的不透明度或当前对象的内容物的不透明度。\r\n                .text(d => {\r\n                    if (d.endAngle - d.startAngle > 0.25)\r\n                        return d.data.value.toLocaleString()\r\n                });//如果角度小于0.25则不显示\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "transform"
  ]
},{
  "_id": {
    "$oid": "5f2d0a0bf97310b6fbc9f9f1"
  },
  "course_id": 62,
  "title": "隐藏超出矩形范围的信息",
  "text": "##### 描述：\r\n在上一节中虽然我们把每个矩形的信息都显示在了矩形上，但是有些矩形比较小，而信息的内容很多，使得小矩形的空间放不下这些信息，许多这种超出矩形范围的信息使得整个矩形树图看上去非常的乱，所以我们希望隐藏多余的信息。\r\n\r\n通过`clipPath`可以控制信息显示的范围。\r\n\r\n下面是一个控制显示范围为以`（50,50）`为圆心`50`为半径的圆形的例子：\r\n```\r\nleaf.append(\"clipPath\")\r\n\t\t\t\t\t\t\t\t.attr(\"id\", d => (d.clipUid = d.data.name + \"_clip\")) \r\n\t\t\t\t\t\t\t\t//设置id并在数据结构中新建clipUid属性方便下面引用\r\n                .append(\"circle\") //限定的图形为圆形\r\n\t\t\t\t\t\t\t\t.attr(\"cx\",\"50px\")\r\n\t\t\t\t\t\t\t\t.attr(\"cy\",\"50px\") \r\n\t\t\t\t\t\t\t\t.attr(\"r\", \"50px\")\r\n\r\n```\r\n然后在写入信息之前限定一下显示范围就行了。例如：\r\n```\r\nleaf.append(\"g\")\r\n\t\t\t\t\t\t\t\t.attr(\"clip-path\", d => `url(#${d.clipUid})`)\r\n\t\t\t\t\t\t\t\t//引用clipPath来限制绘制范围\r\n                .selectAll(\"text\")\r\n```\r\n\r\n##### 任务：\r\n为每个矩形添加一个矩形(`rect`)的显示范围，（矩形的宽的高参数以分别给出），并分别设置每个元素的`clipUid`属性为`data.name + \"_clip\"`。",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法添加clipPath\",\r\n    \"teststring\":  \"code.match(/leaf\\\\s*\\\\.\\\\s*append\\\\s*\\\\(\\\\s*\\\"clipPath\\\"\\\\s*\\\\)/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法设置<code>clipUid</code>为<code>d.data.name + \\\"_clip\\\"</code>\",\r\n    \"teststring\":  \"code.match(/((\\\\.\\\\s*attr\\\\s*\\\\(\\\\s*\\\"id\\\"\\\\s*,\\\\s*(?<x1>\\\\w+)\\\\s*=>\\\\s*\\\\(\\\\s*\\\\k<x1>\\\\.clipUid\\\\s*=\\\\s*\\\\k<x1>\\\\.data.name\\\\s*\\\\+\\\\s*\\\"_clip\\\"\\\\s*\\\\)\\\\s*\\\\))|(\\\\.\\\\s*attr\\\\s*\\\\(\\\\s*\\\"id\\\"\\\\s*,\\\\s*function\\\\s*\\\\(\\\\s*(?<x2>\\\\w+)\\\\s*\\\\)\\\\s*\\\\{\\\\s*return\\\\s*\\\\s*\\\\k<x2>\\\\.clipUid\\\\s*=\\\\s*\\\\k<x2>\\\\.data.name\\\\s*\\\\+\\\\s*\\\"_clip\\\"\\\\s*;?\\\\s*\\\\}\\\\s*\\\\)))/g)\"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>append()</code>方法限定范围为矩形\",\r\n    \"teststring\":  \"$('clipPath')[0].children.length==1 && $('clipPath')[0].children[0].nodeName== 'rect' \"\r\n   }\r\n   ,\r\n   { \r\n    \"text\": \"您的代码应该使用<code>attr()</code>方法在写入信息之前限定显示范围\",\r\n    \"teststring\":  \"code.match(/\\\\.\\\\s*attr\\\\s*\\\\(\\\\s*\\\"clip-path\\\"\\\\s*,\\\\s*(?<x>\\\\w+)\\\\s*=>\\\\s*`\\\\s*url\\\\s*\\\\(\\\\s*#\\\\$\\\\{\\\\k<x>\\\\.clipUid\\\\}\\\\s*\\\\)\\\\s*`\\\\s*\\\\)/g)\"\r\n   }\r\n]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n    const width = 954;\r\n    const height = 954;\r\n    const svg = d3.select(\"body\").append(\"svg\")\r\n                .attr(\"viewBox\", [0, 0, width, height])\r\n                .style(\"font\", \"10px sans-serif\");\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\r\n    var format = d3.format(\",d\");\r\n    \r\n    d3.json(\"/data/flare-2.json\").then(function(data){  \r\n            \r\n            var hierarchy_data = d3.hierarchy(data)\r\n                 .sum(d => d.value)\r\n                 .sort((a, b) => a.value - b.value)\r\n\r\n            var treemap = d3.treemap()\r\n                 .size([width,height])\r\n                 .padding(1);\r\n            \r\n            var root = treemap(hierarchy_data);\r\n            \r\n            var leaf = svg.selectAll(\"g\")\r\n                .data(root.leaves())\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${d.x0},${d.y0})`);\r\n            \r\n            leaf.append(\"rect\")\r\n                .attr(\"fill\", d => {\r\n                    while (d.depth > 1) d = d.parent;\r\n                    return color(d.data.name);\r\n                })\r\n                .attr(\"fill-opacity\", 0.6)  \r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0);\r\n\r\n                //请在下面添加你的代码\r\n                \r\n            leaf\r\n            \r\n            \r\n                //请在上面添加你的代码\r\n                .attr(\"width\", d => d.x1 - d.x0)\r\n                .attr(\"height\", d => d.y1 - d.y0)\r\n            \r\n            leaf.append(\"g\")\r\n            \r\n                //请在下面添加你的代码\r\n                \r\n                \r\n                \r\n                //请在上面添加你的代码\r\n                \r\n                .selectAll(\"text\")\r\n                .data(d => d.data.name.split(/(?=[A-Z][a-z])|s+/g).concat(format(d.value)))\r\n                .join(\"text\")\r\n                .attr(\"x\", 3)\r\n                .attr(\"y\", (d, i) => (i + 1) * 10)\r\n                .text(d => d)\r\n\r\n        });\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "clipPath"
  ]
},{
  "_id": {
    "$oid": "5f3899d1d2b0d13ce1b312cd"
  },
  "course_id": 37,
  "title": "介绍插值函数",
  "text": "##### 描述：\r\n插值，它的意思其实就是返回一段区间上某个位置的值。\r\n\r\n比如对[0, 10]插值，0对应0，0.5对应5，1对应10。\r\n\r\n数值区间插值相对比较简单，而对日期和颜色插值的话就比较麻烦。\r\n\r\nD3就为我门提供了插值函数，这样可以很容易对日期和颜色进行插值。这节我们主要介绍两个插值函数`d3.interpolate()`和`d3.quantize()`。\r\n\r\n当看到`interpolate(\"red\", \"yellow\")`，就是在红色和黄色这个区间进行插值。0代表红色，1代表黄色，0.3返回的就是红色和黄色之间偏红色的颜色。\r\n\r\n具体而言，`d3.interpolate(a,b)`返回一个介于a,b之间的默认插值器，插值器的类型取决于b的类型，使用以下算法：\r\n\r\n* 如果b为null、未定义或布尔值，则使用常数b\r\n* 如果b是数字，则返回`interpolateNumber`插值器\r\n* 如果b是颜色类型或者可转换为颜色的字符串，则返回`interpolateRgb`插值器\r\n* 如果b是日期，则返回`interpolateDate`插值器\r\n* 如果b是类型化的数字数组，则返回`interpolateNumberArray`插值器\r\n* 如果b是字符串类型，则返回`interpolateString`插值器\r\n* 如果b是数组类型，则返回`interpolateArray`插值器\r\n* 如果b是对象类型，且不能强制转换成字符串类型，则返回`interpolateObject`插值器\r\n* 如果b可强制转换为数字，则返回`interpolateNumber`插值器\r\n\r\n`d3.quantize(interpolator, n)` ：从指定的插值器中返回n个均匀间隔的样本，其中n是一个大于1的整数。第一个样本总是在t=0，最后一个样本总是在t=1。这在从给定的插值器中生成固定数量的样本时很有用，例如从连续插值器中得出量化尺度的范围。\r\n\r\n```\r\nqz = d3.scaleQuantize()\r\n  .domain([0, 1000])\r\n  .range(d3.quantize(colorInterpolator, 3))\r\n```\r\n\r\n在上面的例子中，qz比例尺将它的`domain`量化为3个等长区间：\r\n* for 0 ≤ x ≤ 333, qz(x) is red — rgb(255, 0, 0)\r\n* for 334 ≤ x ≤ 666, qz(x) is purple — rgb(128, 0, 128)\r\n* for 667 ≤ x ≤ 1000, qz(x) is blue — rgb(0, 0, 255)\r\n\r\n注意：此方法不能用于那些不返回其输出的防御性副本的内插器，如`d3.interpolateArray`、`d3.interpolateDate`和`d3.interpolateObject`。对于这些内插函数，您必须对内插函数进行包装，并为每个返回的值创建一个副本。\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n##### 任务\r\n这节没有任务，请继续学习下一节吧！",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"这些矩形都应该有海军蓝的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('rect').css('fill') == 'rgb(0, 0, 128)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n\r\n  </script>\r\n</body>\r\n",
  "concept": [
    "interpolate()",
    "quantize()"
  ]
},{
  "_id": {
    "$oid": "5f70309abd6ecef5178756b6"
  },
  "course_id": 64,
  "title": "课程模版",
  "text": "",
  "goal": "\r\n[     \r\n   { \r\n    \"text\": \"这些矩形都应该有海军蓝的<code>fill</code>颜色。\",\r\n    \"teststring\": \"$('rect').css('fill') == 'rgb(0, 0, 128)'\"\r\n   }\r\n    ]",
  "frame_head": "<!DOCTYPE html>\r\n<html lang=en>\r\n    <head>\r\n         <script type=\"text/javascript\" src=\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"></script>\r\n         <script src=\"https://d3js.org/d3.v5.min.js\"></script>\r\n         <script src=\"../node_modules/jquery/dist/jquery.js\"></script>\r\n         <script type=\"text/javascript\"> \r\n         new window.VConsole();\r\n         </script>\r\n         <script src=\"../js/iframe.js\"></script>       \r\n    </head>\r\n    ",
  "frame_foot": "</html>",
  "code": "<body>\r\n  <script>\r\n  \r\n  </script>\r\n</body>\r\n",
  "concept": [
    "zzzz",
    "zzzz",
    "zzzzzz"
  ]
}]